import{_ as o,c as t,o as e,a7 as a}from"./chunks/framework.SbOxrpL8.js";const c="/images/2017/12/pac.png",g=JSON.parse('{"title":"ShadowSocks PAC过滤规则说明","description":"","frontmatter":{"title":"ShadowSocks PAC过滤规则说明","tags":["PAC","ShadowSocks"],"id":1855,"categories":["Web"],"abbrlink":"7868958c","date":"2017-12-07T14:48:48.000Z"},"headers":[],"relativePath":"web/shadowsocks_pac过滤规则说明.md","filePath":"web/shadowsocks_pac过滤规则说明.md","lastUpdated":1719711816000}'),r={name:"web/shadowsocks_pac过滤规则说明.md"},i=a('<p>SS小飞机文件夹有个pac.txt，打开会发现是一个JS格式的文件，这就是自动代理配置文件 PAC全称Proxy Auto Config File，用于根据URL选择不同代理服务器或是不代理直接访问，相比于传统代理可以加快速度，也减少代理服务器的流量</p><p><img src="'+c+'" alt=""></p><p>PAC最早是Ad Block使用的一种规则，用于屏蔽网页各种广告，所以参数除了URL外还支持各种DOM元素，详细参数看这里 <a href="https://adblockplus.org/en/filter-cheatsheet" target="_blank" rel="noreferrer">https://adblockplus.org/en/filter-cheatsheet</a> SS小飞机只用了URI部分的规则，完整文件在根目录下pac.txt，如果需要增加规则，则修改user-rule.txt，然后SS就会自动跟GFW合并生成pac.txt user-rule.txt格式每行一个规则，! 开头表示注释</p><ol><li>支持通配符，比如 *.21ido.com，但这句其实用 .21ido.com 即可</li><li>|| 协议通杀， ||.21ido.com 匹配 <a href="ftp://21ido.com" target="_blank" rel="noreferrer">ftp://21ido.com</a>，<a href="http://21ido.com" target="_blank" rel="noreferrer">http://21ido.com</a>，<a href="https://21ido.com" target="_blank" rel="noreferrer">https://21ido.com</a></li><li>@@ 例外，比如上面的||匹配了所有21ido.com，如果其中blog.21ido.com不希望被匹配，则加一行 @@blog.21ido.com</li><li>| 开头或结束，上面的例外规则，如果遇到 blog.21ido.com.cn其实还是会被例外放行，如果不希望.com外的域名也被匹配到，改为 @@blog.21ido.com|，同理也可以放在开头如@@|blog.21ido.com|</li><li>^ 标记分隔符，跟结束符 | 相似，但^表示非字母数字及_ - . %外的字符，比如 21ido.com^ 除了匹配 21ido.com/ 外，还可以匹配 21ido.com:8080/ 或是 21ido.com?t=2017</li><li>正则，斜杠/开头并斜杠/结束，比如<code>/^https?:\\\\/\\\\/[^\\\\/]+blogspot\\\\.(.*)/</code></li></ol>',4),s=[i];function d(l,_,p,n,m,h){return e(),t("div",{"data-pagefind-body":!0},s)}const b=o(r,[["render",d]]);export{g as __pageData,b as default};

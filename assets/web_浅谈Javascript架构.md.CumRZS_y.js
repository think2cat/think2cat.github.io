import{_ as a,o as e,c as i,a7 as l}from"./chunks/framework.Baf15UXz.js";const t="/images/2011/10/framework1.png",o="/images/2011/10/framework2.png",f=JSON.parse('{"title":"浅谈Javascript架构","description":"","frontmatter":{"title":"浅谈Javascript架构","tags":["javascript"],"categories":["Web"],"abbrlink":"7f6ece31","date":"2011-10-21T20:16:05.000Z"},"headers":[],"relativePath":"web/浅谈Javascript架构.md","filePath":"web/浅谈Javascript架构.md","lastUpdated":1719711816000}'),r={name:"web/浅谈Javascript架构.md"},s=l('<h2 id="_1-交互模式" tabindex="-1">1. 交互模式 <a class="header-anchor" href="#_1-交互模式" aria-label="Permalink to &quot;1. 交互模式&quot;">​</a></h2><p>以往的交互模式，用户一旦点击链接、或者提交表单，都将重定向到服务器，待服务器处理完返回 完整html代码，而且此时浏览器需要重新载入相关JS、CSS、Image，对服务器和浏览器资源消耗都比较大 <img src="'+t+'" alt="framework"></p><p>而ajax技术流行之后，B/S交互模式产生变化，最主要是产生了中间层 <img src="'+o+'" alt="framework"></p><p>增加ajax中间层之后，交互产生了变化</p><ol><li>异步请求，改善用户体验</li><li>减少http请求量和数据量（HTML、CSS、Image、JS都无需重新载入）</li></ol><h2 id="_2-架构模式" tabindex="-1">2.架构模式 <a class="header-anchor" href="#_2-架构模式" aria-label="Permalink to &quot;2.架构模式&quot;">​</a></h2><p>得益于ajax异步请求技术，大部分复杂的页面，都可以使用模块化架构 当然没有数据交换的页面也可以模块化，但是在如今网络数据请求频繁的操作面前，ajax异步请求显得尤为重要</p><h3 id="a-类库-base-lib" tabindex="-1">a) 类库(Base Lib) <a class="header-anchor" href="#a-类库-base-lib" aria-label="Permalink to &quot;a) 类库(Base Lib)&quot;">​</a></h3><p>类库是最基本的的类，通常只有应用知道加载了哪些类库 类库的任务</p><ol><li>解决浏览器兼容性</li><li>DOM等对象操作</li><li>XML、JSON数据操作</li><li>AJAX对象</li><li>扩展性</li></ol><h3 id="b-模块-modules" tabindex="-1">b) 模块(Modules) <a class="header-anchor" href="#b-模块-modules" aria-label="Permalink to &quot;b) 模块(Modules)&quot;">​</a></h3><p>一切皆为模块，模块本身并不知道外面环境，模块必须运行在沙箱，模块间要解耦 模块设计原则</p><ol><li>不创建全局变量</li><li>不访问非内置全局变量</li><li>不访问无关DOM节点</li><li>只能调用自己，或者沙箱里的方法</li><li>不直接引用其它模块，需要时先向沙箱申请</li></ol><h3 id="c-沙箱-sandbox" tabindex="-1">c) 沙箱(Sandbox) <a class="header-anchor" href="#c-沙箱-sandbox" aria-label="Permalink to &quot;c) 沙箱(Sandbox)&quot;">​</a></h3><p>沙箱是模块运行的安全环境 沙箱的责任</p><ol><li>安全性，当模块调用方法时，确保接口有该方法访问权利</li><li>交互性，及时把模块请求发给系统</li></ol><h3 id="d-应用-app-core" tabindex="-1">d) 应用(App Core) <a class="header-anchor" href="#d-应用-app-core" aria-label="Permalink to &quot;d) 应用(App Core)&quot;">​</a></h3><p>应用的任务</p><ol><li>管理模块生命周期，创建、销毁模块</li><li>处理模块间交互，尽可能解耦</li><li>异常处理，检测、报告错误</li><li>扩展性</li></ol>',19),c=[s];function d(p,n,_,h,b,m){return e(),i("div",{"data-pagefind-body":!0},c)}const x=a(r,[["render",d]]);export{f as __pageData,x as default};

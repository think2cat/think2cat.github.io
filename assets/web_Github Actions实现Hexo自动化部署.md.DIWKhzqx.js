import{_ as s,o as i,c as a,a7 as n}from"./chunks/framework.ClMj9r9D.js";const t="/images/2023/05/actions1.png",p="/images/2023/05/actions2.png",h="/images/2023/05/actions3.png",e="/images/2023/05/actions4.png",l="/images/2023/05/actions5.png",m=JSON.parse('{"title":"Github Actions实现Hexo自动化部署","description":"","frontmatter":{"title":"Github Actions实现Hexo自动化部署","categories":["Web"],"tags":["Git","Github","CI/CD"],"abbrlink":"49292e5e","date":"2023-05-03T23:26:22.000Z"},"headers":[],"relativePath":"web/Github Actions实现Hexo自动化部署.md","filePath":"web/Github Actions实现Hexo自动化部署.md","lastUpdated":1719711816000}'),k={name:"web/Github Actions实现Hexo自动化部署.md"},r=n('<p>本文介绍了如何使用GitHub Actions实现Hexo自动化部署，并指出了一些现有YAML代码所引用的脚本比较老导致报错的问题。</p><p>Hexo是一个快速、简单且强大的静态博客框架，而GitHub Actions则是一项功能强大的CI/CD工具，可以自动化地执行软件开发工作流程，用于自动构建、测试和部署代码，从而加快软件开发周期。</p><p>GitHub Actions使用YAML脚本语言，一种轻量级的标记语言，语法简单，相比JSON更加简介，可以轻松地编写和维护自动化工作流程。</p><h2 id="_1-ssh秘钥" tabindex="-1">1. SSH秘钥 <a class="header-anchor" href="#_1-ssh秘钥" aria-label="Permalink to &quot;1. SSH秘钥&quot;">​</a></h2><p>我的Hexo分2个Git仓库，源码为私库 21ido.com，发布到 GitHub Pages为公开库 think2cat.github.io</p><p>因为是从源码私库push到Pages公开库，此时需要在公开库设置公钥</p><h3 id="_1-1-生成秘钥" tabindex="-1">1.1 生成秘钥 <a class="header-anchor" href="#_1-1-生成秘钥" aria-label="Permalink to &quot;1.1 生成秘钥&quot;">​</a></h3><p>执行下面代码，其中邮箱替换成自己的</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keygen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t rsa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gavin2026@xxx.com&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f hexo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span></code></pre></div><p>生成2个文件，hexo 和 hexo.pub</p><h3 id="_1-2-设置公钥" tabindex="-1">1.2 设置公钥 <a class="header-anchor" href="#_1-2-设置公钥" aria-label="Permalink to &quot;1.2 设置公钥&quot;">​</a></h3><p>用记事本打开 hexo.pub，全选复制后到GitHub Pages库</p><p>Settings &gt; Deploy keys &gt; Add deploy key</p><p><img src="'+t+'" alt="Deploy key"></p><p>把刚刚复制的粘贴进去，Title可以随便起，有多个公钥时可以区分，只有一个的话就无所谓了</p><p>然后记得把下面的 Allow write access勾上</p><p><img src="'+p+'" alt="Add deploy key"></p><h3 id="_1-3-设置私钥" tabindex="-1">1.3 设置私钥 <a class="header-anchor" href="#_1-3-设置私钥" aria-label="Permalink to &quot;1.3 设置私钥&quot;">​</a></h3><p>接着记事本打开hexo，全选复制，私钥会长很多，到源码库</p><p>Settings &gt; Secrets &gt; Actions &gt; New repository secret</p><p><img src="'+h+'" alt="Actions"></p><p>Name相当于变量名，可以自己起个名字，但要跟后面的yaml文件对应，系统默认大写，就算输入小写也会自动变成大写</p><p><img src="'+e+'" alt="New repository secret"></p><p>确定后这步就完成了，等于从源码库push到页面库时，公钥和私钥作为检验权限使用，而把私钥加在这里，是为了避免在源码写秘钥容易泄露，而且Actions的日志遇到 Secret 里的变量时，会自动处理成 ***，而不是明文，也能避免私钥泄露</p><h2 id="_2-创建工作流" tabindex="-1">2. 创建工作流 <a class="header-anchor" href="#_2-创建工作流" aria-label="Permalink to &quot;2. 创建工作流&quot;">​</a></h2><p>因为写hexo是push到源码库，然后由源码库编译生成pages，再把生成的页面push到Pages库，所以工作流是建在源码库</p><p>点击 Actions &gt; New workflow</p><p><img src="'+l+`" alt="New workflow"></p><p>也可以直接在Git库根目录新建 .github \\ workflows 目录，然后在 workflows 目录再新建 yml 文件，文件名随意，新建的工作流都会在Actions下显示</p><p>工作流分为几步骤</p><ol><li>checkout code</li><li>配置node环境</li><li>安装依赖包</li><li>安装hexo</li><li>hexo生成页面</li><li>发布到GitHub Pages</li></ol><p>完整的YML脚本如下</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy blog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;npm&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install Dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm ci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install hexo...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        npm install hexo-cli -g</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hexo generate public files...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hexo clean</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hexo g</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        deploy_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ACTIONS_DEPLOY_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        external_repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">think2cat/think2cat.github.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        publish_branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        publish_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./public</span></span></code></pre></div><h2 id="_3-报错解决" tabindex="-1">3. 报错解决 <a class="header-anchor" href="#_3-报错解决" aria-label="Permalink to &quot;3. 报错解决&quot;">​</a></h2><ul><li><p>Please update the following actions to use Node.js 16</p><p>最开始用的是网上找的脚本 actions/checkout@v1 和 actions/setup-node@v2 版本为12，于是改为 actions/checkout@v3 和 actions/setup-node@v3，并配上 16 版本属性</p></li><li><p>Error: pngquant failed to build, make sure that libpng-dev is installed</p><p>使用部署脚本为 sma11black/hexo-action@v1.0.3 错误原因未知，可能是node版本兼容问题，改为全局安装 hexo + build</p></li><li><p>Please make sure you have the correct access rights and the repository exists. Error: Action failed with &quot;The process &#39;/usr/bin/git&#39; failed with exit code 128&quot;</p><p>Git库权限问题，确保SSH公钥和私钥是一对，且对应的库没搞错</p></li></ul><p>脚本依赖包没有考虑做缓存，可以自己试试用 actions/cache</p><h2 id="_4-附录" tabindex="-1">4. 附录： <a class="header-anchor" href="#_4-附录" aria-label="Permalink to &quot;4. 附录：&quot;">​</a></h2><p>阮一峰YAML教程 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p><p>Github Actions <a href="https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions" target="_blank" rel="noreferrer">https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions</a></p><p>actions-gh-pages <a href="https://github.com/peaceiris/actions-gh-pages#readme" target="_blank" rel="noreferrer">https://github.com/peaceiris/actions-gh-pages</a></p>`,40),o=[r];function E(d,c,g,y,u,F){return i(),a("div",{"data-pagefind-body":!0},o)}const _=s(k,[["render",E]]);export{m as __pageData,_ as default};

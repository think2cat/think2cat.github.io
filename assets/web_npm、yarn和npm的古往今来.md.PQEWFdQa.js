import{_ as n,c as a,o,a7 as r}from"./chunks/framework.H1k9SCod.js";const _=JSON.parse('{"title":"npm、yarn和pnpm的古往今来","description":"","frontmatter":{"title":"npm、yarn和pnpm的古往今来","categories":["Web"],"tags":["nodejs","npm"],"abbrlink":"4fefd04c","date":"2023-12-14T21:36:52.000Z"},"headers":[],"relativePath":"web/npm、yarn和npm的古往今来.md","filePath":"web/npm、yarn和npm的古往今来.md","lastUpdated":1719711816000}'),e={name:"web/npm、yarn和npm的古往今来.md"},i=r('<h3 id="i-引言" tabindex="-1">I. 引言 <a class="header-anchor" href="#i-引言" aria-label="Permalink to &quot;I. 引言&quot;">​</a></h3><p>本文将深入探讨这三种包管理工具的背景、特点和使用场景，以帮助读者更好地了解它们，为自己的项目选择合适的工具。从最初的 Node.js 发布到包管理工具的崛起和不断演进，我们将带您一一解读，探索它们背后的故事和技术细节。</p><p>无论您是新手开发者还是资深工程师，相信本文都能为您带来一些有价值的信息和启发。让我们一起探索 npm、Yarn 和 PNPM 的世界，为我们的项目选择最佳伙伴！</p><h4 id="_1-npm背景介绍" tabindex="-1">1. npm背景介绍 <a class="header-anchor" href="#_1-npm背景介绍" aria-label="Permalink to &quot;1. npm背景介绍&quot;">​</a></h4><p>Node.js的第一个版本是由Ryan Dahl创建的，最初发布于2009年5月27日 该版本基于v8引擎，提供了一个事件驱动、非阻塞I/O环境，使得JS可以运行在服务器环境下 而为了解决node.js生态系统中包的管理问题，在2010年，Isaac Z. Schlueter发布了npm</p><h4 id="_2-包管理工具的重要性" tabindex="-1">2. 包管理工具的重要性 <a class="header-anchor" href="#_2-包管理工具的重要性" aria-label="Permalink to &quot;2. 包管理工具的重要性&quot;">​</a></h4><p>包管理工具在现代软件开发中是不可或缺的一部分，其重要性体现在以下几个方面：</p><ol><li><strong>依赖管理</strong> 软件开发通常依赖于许多第三方库和工具。包管理工具能够方便地安装、更新和卸载这些依赖，确保项目能够顺利运行并保持最新状态。</li><li><strong>版本控制</strong> 包管理工具提供了对依赖项版本的控制机制。通过语义化版本控制（Semantic Versioning），开发者能够明确指定项目对依赖项的版本要求，避免由于版本不一致导致的兼容性问题。</li><li><strong>易于分享和分发</strong> 包管理工具使得开发者能够方便地分享自己的代码库（包）给其他人使用。这种分享机制促进了开源社区的发展，使得开发者能够从全球范围内获取并贡献代码。</li><li><strong>构建和部署</strong> 包管理工具通常集成了构建和打包的功能，简化了项目的构建过程。通过包管理工具，开发者可以轻松地将项目部署到生产环境中。</li><li><strong>自动化任务</strong> 包管理工具支持定义和运行各种自动化任务，例如运行测试、执行代码风格检查、生成文档等。这些任务可以通过配置文件或命令行参数进行定制，提高了开发过程的效率。</li><li><strong>安全性</strong> 包管理工具通常包含安全审查机制，能够检测并报告依赖项中存在的安全漏洞。这有助于开发者及时采取措施，保障项目的安全性。</li><li><strong>多项目管理</strong> 对于大型项目或使用多个子项目的情况，包管理工具支持工作区（workspace）和多包存储库，使得依赖项的管理更加灵活。</li><li><strong>环境隔离</strong> 包管理工具可以创建虚拟环境，将项目的依赖项隔离开来，避免了不同项目之间的冲突。这种隔离有助于确保项目在不同环境中的稳定性。</li></ol><h3 id="ii-npm的特点和优势" tabindex="-1">II. NPM的特点和优势 <a class="header-anchor" href="#ii-npm的特点和优势" aria-label="Permalink to &quot;II. NPM的特点和优势&quot;">​</a></h3><p>NPM全称Node Package Manager，从名称可以看出是node包的管理工具</p><ol><li><strong>便捷的包管理</strong>，通过简单命令，即可方便的安装、更新和卸载包，无需手动管理依赖关系</li><li><strong>语义化版本控制</strong>，指定依赖包的版本范围，避免兼容问题</li><li><strong>丰富的生态系统</strong>，庞大的生态系统，覆盖了几乎整个JS开发领域，可以轻松找到开发所需功能和工具</li><li><strong>命令行工具</strong>，不仅提供了安装、卸载命令，也提供了脚本执行、查看依赖等工具</li><li><strong>安全性</strong>，npm对包进行安全审查，及时报告安全漏洞</li></ol><h3 id="iii-yarn的独特之处" tabindex="-1">III. Yarn的独特之处 <a class="header-anchor" href="#iii-yarn的独特之处" aria-label="Permalink to &quot;III. Yarn的独特之处&quot;">​</a></h3><p>Yarn 是由 Facebook、Google、Exponent 和 Tilde 共同开发的开源项目（基于MIT许可证），于2016年10月发布，相比于npm，yarn有诸多优势</p><ol><li><strong>并行安装</strong> yarn能够并行安装依赖包，从而在速度上甩npm几条街，这也是大部分开发人员转投yarn的原因 注：npm在2020年10月发布的7.0版本也开始支持并行安装，可以用<code>npm install --legacy-peer-deps</code>启用并行</li><li><strong>锁定文件（lock file）</strong> yarn.lock文件记录了安装包的依赖版本，确保不同环境的依赖性保持一致</li><li><strong>缓存策略和离线支持</strong> 下载过的包会在本地缓存起来，当需要重新安装包时甚至可以脱离网络</li><li><strong>Workspace支持</strong> 当需要在单个版本库管理多个相关包时，通过workspace可以轻松管理，共享依赖关系，并确保之间一致性</li><li><strong>Plug&#39;n&#39;Play（PnP）模式</strong> 该模式下不需要安装实际依赖库，而是直接使用，减少 <code>node_modules</code> 文件夹体积和构建时间</li><li><strong>处理重复依赖</strong> 当有多个库重复依赖一个包时，yarn可以减少冗余，提高安装效率</li></ol><h3 id="iv-pnpm的崛起" tabindex="-1">IV. pnpm的崛起 <a class="header-anchor" href="#iv-pnpm的崛起" aria-label="Permalink to &quot;IV. pnpm的崛起&quot;">​</a></h3><p>pnpm是由 Zoltan Kochan 创建开源项目（基于MIT许可证），发布于2016年，但是开始流行是在2020年左右</p><p>主要特点有：</p><ol><li><strong>链接形式的共享模块</strong> 使用符号链接共享相同的模块，减少磁盘空间占用 相对于yarn的PnP模式，符号链接是在安装时共享模块，而PnP模式则是在运行时以虚拟文件系统加载依赖性</li><li><strong>并行安装和缓存策略</strong> 跟Yarn一样，pnpm支持并行安装和本地缓存，加快了安装效率和降低网络依赖</li><li><strong>增量式安装</strong> 当安装或是更新依赖时，pnpm会先检查依赖树，并与<code>package.json</code>比较，找出需要新增或更新的部分，而不是整个依赖树</li><li><strong>Workspaces支持</strong> 使得更轻松管理多个包的版本库，共享依赖并保障一致性</li><li><strong>预先编译</strong><code>pnpm install --frozen-lockfile</code> 可以在安装时预先编译为二进制文件，减少构建时间</li><li><strong>对Windows友好性</strong><ul><li>符号链接对Windows新老版本都很友好</li><li>针对Windows文件系统特性进行了优化</li><li>积极关注和解决Windows平台的bug，稳定性更高</li></ul></li></ol><h3 id="v-选择建议" tabindex="-1">V. 选择建议 <a class="header-anchor" href="#v-选择建议" aria-label="Permalink to &quot;V. 选择建议&quot;">​</a></h3><p>各个包管理工具，都有其适合的使用场景，需根据项目特点、团队需求进行选择</p><ol><li>npm适用中小型项目，有官方支持，与社区生态集成度高，尤其大部分框架和脚手架都默认适用npm</li><li>yarn适用中大型项目，更快速的安装，更好的缓存机制， 并且<code>yarn.lock</code>可以确保团队中均使用相同依赖版本</li><li>pnpm同样适用中大型项目或者monorepo结构的项目，符号链接减少磁盘占用， 并且对Windows平台极为友好</li></ol><p>随着 JavaScript 生态系统的不断发展和项目规模的不断扩大，包管理工具的选择变得越来越重要。无论是对于小型项目还是大型项目，选择合适的工具都能够极大地提高开发效率和项目质量。</p><h3 id="vi-附录" tabindex="-1">Ⅵ. 附录 <a class="header-anchor" href="#vi-附录" aria-label="Permalink to &quot;Ⅵ. 附录&quot;">​</a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/37653878" target="_blank" rel="noreferrer">一文看懂npm、yarn、pnpm之间的区别</a></li><li><a href="https://juejin.cn/post/7060448346107805732" target="_blank" rel="noreferrer">2022 前端包管理方案-pnpm 和 corepack</a></li><li><a href="https://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noreferrer">package.json文件</a></li></ul>',24),l=[i];function t(s,p,c,d,g,m){return o(),a("div",{"data-pagefind-body":!0},l)}const u=n(e,[["render",t]]);export{_ as __pageData,u as default};

import{_ as s,o as a,c as p,a7 as e}from"./chunks/framework.ClMj9r9D.js";const n="/images/2018/02/tcp3.png",t="/images/2018/02/tcp4.png",c="/images/2018/02/socket.png",T=JSON.parse('{"title":"WebSocket入门（1）TCP基础","description":"","frontmatter":{"title":"WebSocket入门（1）TCP基础","tags":["http","socket","tcp"],"id":1897,"categories":["IT"],"abbrlink":"83090531","date":"2018-02-26T18:18:15.000Z"},"headers":[],"relativePath":"web/WebSocket入门(1)TCP基础.md","filePath":"web/WebSocket入门(1)TCP基础.md","lastUpdated":1719711816000}'),i={name:"web/WebSocket入门(1)TCP基础.md"},o=e('<p>WebSocket是html5的产物，跟socket相似，但是前期通讯是基于http，而http又是基于TCP 先说下TCP的三次握手</p><p><img src="'+n+`" alt=""></p><p>翻译成人话就是这样</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>客户端：老哥你在吗</span></span>
<span class="line"><span>服务端：老弟找我啥事</span></span>
<span class="line"><span>服务端：太好了是这样的</span></span>
<span class="line"><span>然后传输开始巴拉巴拉巴拉</span></span></code></pre></div><p>TCP握手建立连接后，就开始基于HTTP协议传输数据，在http 1.0的时候，每个请求都需要一个连接，请求完成连接就断开，然后重新握手 到了http 1.1则支持一次连接多个请求，像这样 。。。握手之后</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>客户端：吧啦吧啦吧啦吧啦</span></span>
<span class="line"><span>服务端：吧拉收到</span></span>
<span class="line"><span>客户端：吧唧吧唧吧唧吧唧</span></span>
<span class="line"><span>客户端：吧嗒吧嗒吧嗒吧嗒</span></span>
<span class="line"><span>服务端：吧唧收到</span></span>
<span class="line"><span>服务端：吧嗒收到</span></span></code></pre></div><p>请求不一定是依次发送的，可以是重叠，而且每个请求并无需等服务端返回，而且几次请求期间，连接是一直存在的，即使中间不是连续的，客户端也会定时发“keep-alive&quot;的指令让服务端保持连接，而服务端可以通过配置http服务器来设置超时时间，如Apache、Tomcat之类 断开连接则需要4次握手，多出的一次是因为服务端要通知客户端请求完成 如下图</p><p><img src="`+t+`" alt=""></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>客户端：老哥我要断开连接啦</span></span>
<span class="line"><span>服务端：收到断开（然后查一下有没未返回的请求）</span></span>
<span class="line"><span>服务端：所有请求都完成了</span></span>
<span class="line"><span>客户端：断断断切克闹</span></span></code></pre></div><p>Socket是基于传输层和应用层之间的一个抽象层，说白就是对TCP/IP协议的封装，是一个API接口，而不是协议</p><p>Socket也叫套接字，建立Socket需要一对套接字，分别位于客户端和服务端</p><p>首先服务端打开监听服务，客户端对服务器提出请求，服务端确认请求，此时连接就建立起来了</p><p>Socket一般采用TCP协议，也可以指定UDP协议，而HTTP是基于TCP协议应用层协议，在传输层之上的</p><p><img src="`+c+'" alt=""></p><p>题外话，<a href="https://www.zhihu.com/question/21383903" target="_blank" rel="noreferrer">Socket为什么要翻译成套接字？</a></p>',15),l=[o];function d(r,_,h,g,b,k){return a(),p("div",{"data-pagefind-body":!0},l)}const u=s(i,[["render",d]]);export{T as __pageData,u as default};

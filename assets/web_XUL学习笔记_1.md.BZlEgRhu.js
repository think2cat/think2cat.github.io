import{_ as a,c as e,o as t,a7 as i}from"./chunks/framework.SbOxrpL8.js";const o="/images/2006/03/21_2006-3-322128327_12722.gif",h=JSON.parse('{"title":"XUL学习笔记(1)","description":"","frontmatter":{"title":"XUL学习笔记(1)","tags":["XUL"],"id":874,"categories":["Web"],"abbrlink":"425f6509","date":"2006-03-21T23:24:39.000Z"},"headers":[],"relativePath":"web/XUL学习笔记_1.md","filePath":"web/XUL学习笔记_1.md","lastUpdated":1719711816000}'),r={name:"web/XUL学习笔记_1.md"},_=i('<p><img src="'+o+'" alt=""></p><h3 id="一、xul简介" tabindex="-1">一、XUL简介 <a class="header-anchor" href="#一、xul简介" aria-label="Permalink to &quot;一、XUL简介&quot;">​</a></h3><p>XUL是“XML 化的用户界面语言（XML User Interface Language）”的缩写，跟XML一样是一种与平台无关性的语言，是用来描述用户界面的语言，现在被广泛用于Mozilla平台。Mozilla本身的界面就是用XUL进行描述的。</p><h4 id="_1-1-xul相关技术" tabindex="-1">1.1 XUL相关技术 <a class="header-anchor" href="#_1-1-xul相关技术" aria-label="Permalink to &quot;1.1 XUL相关技术&quot;">​</a></h4><p>XUL与以下技术相关：</p><p>对于扩展开发来说，必须掌握的技术有 XUL，CSS，DOM，XPCOM，JavaScipt，而对于 XBL，XPConnet，RDF 做简单了解即可。</p><h4 id="_2-2-各相关技术的功能" tabindex="-1">2.2 各相关技术的功能 <a class="header-anchor" href="#_2-2-各相关技术的功能" aria-label="Permalink to &quot;2.2 各相关技术的功能&quot;">​</a></h4><p>如果说CSS是控制网页界面的话，那XUL即是控制桌面应用程序界面的语言。</p><ol><li>CSS用来控制程序界面，利用CSS可以在界面加上一些效果，例如字体大小、边框、颜色等。当然，也有一些Mozilla独有的特性。</li><li>DOM 主要用来为 JavaScritp 提供一个 HTML/XML 的文档操作接口，并且，它也可以用来操作 CSS，对界面进行“动态”操作，如：按钮的禁止与否，动态装载数据等。可以看出，通过 DOM 接口，我们可以将程序的逻辑处理部分与界面表现部分有机的结合起来。</li><li>JavaScipt 是扩展开发的核心要求，它主要用来实现程序的业务逻辑描述。可以说，从网页下的 JavaScript 开发到扩展下的 JavaScript 开发，是一种由轻量级到重量级的转变。由于 JavaScript 语言只内置了几个与本地访问无关的对象，而对于桌面开发来说，显然不能满足要求。因为桌面开发需要访问大量的本地和网络资源，包括文件，剪贴板，Socket，浏览器本身等各种资源。而 XPCOM 为面向桌面的开发提供了这种可能。只有使用 XPCOM，我们的扩展才可以做出实用的功能，没有 XPCOM，本地与远程的资源整合可以说是不可能。</li></ol>',9),l=[_];function c(s,n,p,d,X,L){return t(),e("div",{"data-pagefind-body":!0},l)}const U=a(r,[["render",c]]);export{h as __pageData,U as default};

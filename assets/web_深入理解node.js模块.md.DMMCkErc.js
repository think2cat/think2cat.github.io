import{_ as s,o as i,c as a,a7 as n}from"./chunks/framework.Baf15UXz.js";const g=JSON.parse('{"title":"深入理解node.js模块","description":"","frontmatter":{"title":"深入理解node.js模块","categories":["Web","nodejs"],"tags":["nodejs","es6","javascript"],"abbrlink":"69025b32","date":"2024-03-09T23:19:56.000Z"},"headers":[],"relativePath":"web/深入理解node.js模块.md","filePath":"web/深入理解node.js模块.md","lastUpdated":1719711816000}'),e={name:"web/深入理解node.js模块.md"},l=n(`<p>JavaScript的思想是一切皆对象，而Node.js编程是基于模块化思想的。</p><h3 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1. 基本概念&quot;">​</a></h3><p>Node.js采用了CommonJS模块系统，每个文件都是一个独立的模块，每个模块都有自己的作用域，可以有自己的变量和函数。这种模块化的设计使得代码更易于组织、维护和重用。</p><p>通过模块化，开发者可以将复杂的程序拆分成小的、独立的模块，每个模块专注于特定的功能。这样做有助于降低代码的耦合度，提高代码的可读性和可维护性。</p><p>此外，Node.js的模块化设计还支持模块之间的依赖管理，使得开发者可以方便地引入其他模块提供的功能。</p><h3 id="_2-模块实现" tabindex="-1">2. 模块实现 <a class="header-anchor" href="#_2-模块实现" aria-label="Permalink to &quot;2. 模块实现&quot;">​</a></h3><p>模块代码默认是私有的，不会污染全局作用域</p><p>使用<code>module.exports</code> 或者 <code>exports</code> 导出模块中变量、函数或对象</p><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个函数，用于输出&quot;Hello, World!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将函数导出，以便其他文件可以使用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sayHello</span></span></code></pre></div><p>上面代码定义了 <code>sayHello</code> 函数，并通过 <code>module.exports</code> 暴露接口，使得其它文件可以引入并调用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello, World!</span></span></code></pre></div><p>使用时使用<code>require</code>引入模块，并赋值给 <code>hello</code>，此时 <code>hello = sayHello</code></p><h3 id="_3-共享引用机制" tabindex="-1">3. 共享引用机制 <a class="header-anchor" href="#_3-共享引用机制" aria-label="Permalink to &quot;3. 共享引用机制&quot;">​</a></h3><p>Node.js模块导出的是对象的引用，而不是对象实例，其它模块引入后，实际获取的是同一个对象的引用，这意味着任何修改都会影响到引入该对象的其它模块</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// module.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Gavin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> infoA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> infoB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, infoA.name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gavin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">infoA.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Cat&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, infoA.name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, infoB.name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cat</span></span></code></pre></div><p>打印结果可以看出 <code>infoA</code>和<code>infoB</code>两个对象引用的是同一个对象，Node.js这种共享引用机制，一是可以方便模块之间数据共享，二是有利于节省内存</p><p>如果导出的是字符串或数值，则不是引用，而是复制了副本</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Gavin&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name, age } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: age2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 18</span></span></code></pre></div><h3 id="_4-路径解析" tabindex="-1">4. 路径解析 <a class="header-anchor" href="#_4-路径解析" aria-label="Permalink to &quot;4. 路径解析&quot;">​</a></h3><ol><li>绝对路径解析 当给<code>require()</code>函数传递以斜杆 <code>/</code> 开头的路径，node.js会解析为绝对路径，即相对于文件系统根目录，比如<code>require(&#39;/path/demo/module&#39;)</code></li><li>相对路径解析 当给<code>require()</code>函数传递以斜杆 <code>./</code>或<code>../</code> 开头的路径，node.js会解析为相对路径，即相对于当前模块文件的路径，比如<code>require(&#39;./module&#39;)</code></li><li>核心模块解析 当给<code>require()</code>函数传递不是绝对路径也不是相对路径时，node.js会解析成核心模块，比如<code>require(&#39;http&#39;)</code></li><li>模块路径解析 当在本层<code>node_modules</code>目录查找不到核心模块，node.js会逐级往上查找<code>node_modules</code>目录下是否有匹配模块</li><li>文件扩展名解析 当给<code>require()</code>传递 路径不带扩展名，node.js会尝试添加扩展名匹配具体文件，顺序为<code>.js &gt; .json &gt; .node</code>，如果还找不到文件，则抛出<code>MODULE_NOT_FOUND</code>异常</li></ol><h3 id="_5-模块缓存" tabindex="-1">5. 模块缓存 <a class="header-anchor" href="#_5-模块缓存" aria-label="Permalink to &quot;5. 模块缓存&quot;">​</a></h3><ol><li>缓存机制 node.js中为了减少多次加载相同模块的性能开销，会缓存已加载的模块。 当加载模块时，会先检查缓存，已存在则直接换回缓存中的模块，没有才会重新加载，并进行缓存</li><li>缓存清除 加载模块的缓存，存储到<code>require.cache</code>对象，键值为模块绝对路径，通过<code>delete</code>来删除 例如<code>delete require.cache[require.resolve(&#39;./hello&#39;)]</code></li><li>缓存更新 对于已经缓存的模块，如果模块文件有更新，缓存并不会更新，只有当再次调用<code>require()</code>加载时，缓存才会更新</li></ol><h3 id="_6-循环依赖" tabindex="-1">6. 循环依赖 <a class="header-anchor" href="#_6-循环依赖" aria-label="Permalink to &quot;6. 循环依赖&quot;">​</a></h3><p>循环依赖通常是开发中需要避免的，因为它会增加代码的复杂性，并导致难以维护的代码。</p><p>Node.js 模块的加载是同步的，因此循环依赖会导致其中一个模块在加载过程中尝试去加载另一个模块，从而导致死锁或加载错误。</p><p>Node.js模块系统检测到循环依赖的情况后，为了避免无限递归，加载中的模块会先返回不完整的exports对象，仅包含已经执行的部分模块内容，未执行的部分在后面继续执行。</p><p>通常需要将相互依赖的模块，拆分成更小的模块，以消除循环依赖，另一种方法是使用延迟加载。</p><p>循环依赖在<a href="https://book.douban.com/subject/35608760/" target="_blank" rel="noreferrer">《Node.js设计模式》</a>有详细解释，有兴趣可以看看。</p><h3 id="_7-module-exports-与-exports" tabindex="-1">7. module.exports 与 exports <a class="header-anchor" href="#_7-module-exports-与-exports" aria-label="Permalink to &quot;7. module.exports 与 exports&quot;">​</a></h3><p>module对象是Node.js里一个全局对象，表示当前模块本身，每个模块的module对象是独立的，包含了相关信息和属性，以及导出内容的 <code>exports</code> 对象</p><p>大部分情况下，<code>exports === module.exports</code>，因为指向同一个导出对象，只有在给 <code>exports</code> 赋值时，此时 <code>exports</code> 会指向新赋予的值，而不再指向 <code>module.exports</code>，所以此时 <code>exports !== module.exports</code></p><p>总的来说，CommonJS 模块规范允许开发者自由选择使用 <code>module.exports</code> 或 <code>exports</code> 导出函数，但需要注意它们之间的微妙差异，以避免出现意外的行为。</p><h3 id="_8-es模块" tabindex="-1">8. ES模块 <a class="header-anchor" href="#_8-es模块" aria-label="Permalink to &quot;8. ES模块&quot;">​</a></h3><p>ES模块相对CommonJS模块，主要差异有几点</p><ol><li>语法差异 ES模块使用 <code>export</code> 和 <code>import</code> 进行模块的导出和引入 CommonJS模块使用 <code>module.exports</code> 和 <code>require()</code> 导出和引入</li><li>作用域 ES模块中变量是私有的，不可被全局作用域访问 CommonJS模块的变量是公共的，引用该模块的对象都可访问</li><li>加载方式 ES模块是静态加载，编译时依赖关系就确定了 CommonJS模块是动态加载，依赖关系在运行时才确定</li><li>循环依赖 ES模块不允许循环依赖，会报异常 CommonJS模块运行循环依赖，但不推荐，有可能出现问题，需要谨慎使用</li><li>顶层对象 ES模块没有全局对象，或者说全局对象是<code>undefined</code>，模块变量不会污染全局作用域 CommonJS模块全局对象是<code>global</code>，任何模块中都可以访问到和修改</li></ol><p>ES模块代码示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filterArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { filterArea } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./tools&#39;</span></span></code></pre></div><h3 id="_9-总结" tabindex="-1">9. 总结 <a class="header-anchor" href="#_9-总结" aria-label="Permalink to &quot;9. 总结&quot;">​</a></h3><p>在实际开发中，合理利用 Node.js 的模块化机制可以极大地提高项目的开发效率和代码质量。我们可以将不同功能的代码组织成独立的模块，并通过模块之间的依赖管理，实现模块间的数据共享和功能复用。同时，我们还需要注意避免循环依赖等问题，保证模块之间的稳健性和可靠性。</p><p>深入理解 Node.js 模块化不仅仅是一种编程技巧，更是一种编程思维方式。只有通过不断地学习、实践和总结，才能更好地掌握 Node.js 模块化的精髓，提升自己的开发能力。</p><p>希望本文能够帮助读者更深入地理解 Node.js 模块化，并在实际开发中得到应用。愿大家在 Node.js 开发的路上越走越远，越走越好！</p>`,44),p=[l];function h(t,k,d,o,r,c){return i(),a("div",{"data-pagefind-body":!0},p)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};

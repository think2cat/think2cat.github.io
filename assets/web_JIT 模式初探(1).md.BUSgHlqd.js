import{_ as a,c as t,o as i,a7 as s}from"./chunks/framework.SbOxrpL8.js";const e="/images/2024/09/jit_1.webp",u=JSON.parse('{"title":"JIT 模式初探（上）：什么是 JIT？","description":"","frontmatter":{"sticky":3,"title":"JIT 模式初探（上）：什么是 JIT？","tags":["javascript","JIT","Tailwind"],"categories":["Web"],"date":"2024-09-22T22:13:19.000Z"},"headers":[],"relativePath":"web/JIT 模式初探(1).md","filePath":"web/JIT 模式初探(1).md","lastUpdated":1736179012000}'),l={name:"web/JIT 模式初探(1).md"},r=s('<p><img src="'+e+'" alt=""></p><p>JIT 全称是 <strong>Just-In-Time</strong>，即在程序运行时（而不是预先）动态编译代码。起初，我曾误以为 JIT 就是热更新 HMR，但实际上两者并不相同。</p><h2 id="_1-jit-模式的概念" tabindex="-1">1. JIT 模式的概念 <a class="header-anchor" href="#_1-jit-模式的概念" aria-label="Permalink to &quot;1. JIT 模式的概念&quot;">​</a></h2><p>JIT 的核心思想是 <strong>按需编译和生成资源</strong>，其特点如下：</p><ol><li><strong>按需生成</strong>：只为实际使用的类名生成样式，避免生成无用的样式规则。</li><li><strong>性能优化</strong>：生成的 CSS 文件更小，加载更快。</li><li><strong>动态生成</strong>：可以根据动态类名或自定义规则实时生成 CSS 规则。</li></ol><h2 id="_2-jit-模式与热更新的区别" tabindex="-1">2. JIT 模式与热更新的区别 <a class="header-anchor" href="#_2-jit-模式与热更新的区别" aria-label="Permalink to &quot;2. JIT 模式与热更新的区别&quot;">​</a></h2><p>热更新（HMR）是一种开发时的技术，允许在不刷新整个页面的情况下，实时替换、添加或移除模块（如组件、样式等），从而保持应用的状态。两者虽然具有实时性和动态性，但本质不同。</p><h3 id="热更新-hmr-的核心特点" tabindex="-1"><strong>热更新（HMR）的核心特点</strong>： <a class="header-anchor" href="#热更新-hmr-的核心特点" aria-label="Permalink to &quot;**热更新（HMR）的核心特点**：&quot;">​</a></h3><ol><li><strong>状态保留</strong>：在修改代码的同时保留应用的当前状态，例如表单中的输入数据或选中的复选框。</li><li><strong>提高开发效率</strong>：开发者可以实时看到代码变更的效果，而无需重启应用。</li></ol><h3 id="jit-与-hmr-的区别" tabindex="-1"><strong>JIT 与 HMR 的区别</strong>： <a class="header-anchor" href="#jit-与-hmr-的区别" aria-label="Permalink to &quot;**JIT 与 HMR 的区别**：&quot;">​</a></h3><ol><li><strong>用途不同</strong>： <ul><li>HMR 用于开发中保留状态，提高效率和用户体验。</li><li>JIT 用于按需生成和优化资源。</li></ul></li><li><strong>实现不同</strong>： <ul><li>HMR 优化开发体验，避免中断开发。</li><li>JIT 减少生成资源体积，确保只加载必要资源。</li></ul></li><li><strong>适用场景不同</strong>： <ul><li>HMR 适用于模块化框架（如 React、Vue、Angular）。</li><li>JIT 应用于资源生成和构建阶段。</li></ul></li></ol><h2 id="_3-tailwind-css-中的-jit-模式" tabindex="-1">3. Tailwind CSS 中的 JIT 模式 <a class="header-anchor" href="#_3-tailwind-css-中的-jit-模式" aria-label="Permalink to &quot;3. Tailwind CSS 中的 JIT 模式&quot;">​</a></h2><p>虽然 JIT 并非 Tailwind CSS 独有，但 Tailwind 将其发扬光大，与传统的 CSS 构建方式相比，JIT 模式具有以下特别之处：</p><h3 id="_1-按需生成-css" tabindex="-1">1. <strong>按需生成 CSS</strong> <a class="header-anchor" href="#_1-按需生成-css" aria-label="Permalink to &quot;1. **按需生成 CSS**&quot;">​</a></h3><p>传统编译会生成所有样式（无论是否使用），而 JIT 只生成实际用到的样式。这不仅减少了 CSS 文件大小，还显著提高了加载和渲染速度。</p><h3 id="_2-动态生成-css-类" tabindex="-1">2. <strong>动态生成 CSS 类</strong> <a class="header-anchor" href="#_2-动态生成-css-类" aria-label="Permalink to &quot;2. **动态生成 CSS 类**&quot;">​</a></h3><p>JIT 不仅编译已写好的类名，还可以根据动态类名即时生成样式。例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text-[rgb(255,0,0)] bg-[url(&#39;/image.png&#39;)]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Tailwind JIT 会动态解析并生成对应的 CSS 规则，而不需要预先配置。</p><h3 id="_3-更快的热更新" tabindex="-1">3. <strong>更快的热更新</strong> <a class="header-anchor" href="#_3-更快的热更新" aria-label="Permalink to &quot;3. **更快的热更新**&quot;">​</a></h3><p>JIT 仅在新增或修改类名时重新生成 CSS，因此构建速度更快，热更新响应也更迅速。</p><h3 id="_4-极简配置" tabindex="-1">4. <strong>极简配置</strong> <a class="header-anchor" href="#_4-极简配置" aria-label="Permalink to &quot;4. **极简配置**&quot;">​</a></h3><p>无需手动列出需要保留的类名，Tailwind 会自动识别代码中用到的类，减少了配置的复杂性。</p><h3 id="_5-支持自定义功能" tabindex="-1">5. <strong>支持自定义功能</strong> <a class="header-anchor" href="#_5-支持自定义功能" aria-label="Permalink to &quot;5. **支持自定义功能**&quot;">​</a></h3><p>JIT 模式允许开发者动态添加自定义颜色、间距、字体等，进一步增强了灵活性和扩展能力。</p><h2 id="_4-总结-jit-模式的特别之处" tabindex="-1">4. 总结：JIT 模式的特别之处 <a class="header-anchor" href="#_4-总结-jit-模式的特别之处" aria-label="Permalink to &quot;4. 总结：JIT 模式的特别之处&quot;">​</a></h2><p>Tailwind 的 JIT 模式在现代开发中具备以下优势：</p><p><strong>按需生成样式</strong>，减少冗余，优化资源大小。</p><p><strong>动态类名支持</strong>，适配灵活多变的需求。</p><p><strong>高效的构建和热更新</strong>，显著提升开发效率。</p><p><strong>简化配置与自定义</strong>，为开发者提供更多自由。</p><p>相比传统的静态编译模式，JIT 模式显然更适合动态变化频繁、对性能要求高的项目，是现代前端开发环境中的一大技术进步。</p>',32),n=[r];function o(h,d,p,g,c,_){return i(),t("div",{"data-pagefind-body":!0},n)}const k=a(l,[["render",o]]);export{u as __pageData,k as default};

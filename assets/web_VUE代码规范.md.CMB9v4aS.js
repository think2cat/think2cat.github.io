import{_ as s,c as a,o as i,a7 as n}from"./chunks/framework.H1k9SCod.js";const g=JSON.parse('{"title":"VUE代码规范","description":"","frontmatter":{"title":"VUE代码规范","categories":["Web"],"tags":["javascript","vuejs"],"abbrlink":"c9ca51c5","date":"2019-07-22T14:21:08.000Z"},"headers":[],"relativePath":"web/VUE代码规范.md","filePath":"web/VUE代码规范.md","lastUpdated":1719711816000}'),l={name:"web/VUE代码规范.md"},p=n(`<p>为规范代码特写了本文，但实际由于历史包袱，还有很多jQuery时代的代码，加上人员技术水平不齐，执行起来非常有难度</p><h2 id="_1-目的" tabindex="-1">1. 目的 <a class="header-anchor" href="#_1-目的" aria-label="Permalink to &quot;1. 目的&quot;">​</a></h2><ol><li>易于阅读和理解</li><li>有助于debug</li><li>方便接手的人</li><li>不挖坑</li></ol><h2 id="_2-目录和文件规范" tabindex="-1">2. 目录和文件规范 <a class="header-anchor" href="#_2-目录和文件规范" aria-label="Permalink to &quot;2. 目录和文件规范&quot;">​</a></h2><h3 id="_2-1-目录结构" tabindex="-1">2.1 目录结构 <a class="header-anchor" href="#_2-1-目录结构" aria-label="Permalink to &quot;2.1 目录结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src                                  源码目录</span></span>
<span class="line"><span>|-- api                              接口，统一管理</span></span>
<span class="line"><span>|-- assets                           静态资源，统一管理</span></span>
<span class="line"><span>|-- components                       公用组件，全局文件</span></span>
<span class="line"><span>|-- config                           配置信息</span></span>
<span class="line"><span>|-- filters                          过滤器，全局工具</span></span>
<span class="line"><span>|-- icons                            图标，全局资源</span></span>
<span class="line"><span>|-- layout                           页面模板</span></span>
<span class="line"><span>|-- libs                             公用工具库</span></span>
<span class="line"><span>|-- mock                             模拟接口，临时存放</span></span>
<span class="line"><span>|-- store                            vuex, 状态管理</span></span>
<span class="line"><span>|-- router                           路由，统一管理</span></span>
<span class="line"><span>|-- views                            视图目录</span></span>
<span class="line"><span>|   |-- account                      视图模块名</span></span>
<span class="line"><span>|   |-- |-- mygroup.vue              模块入口页面</span></span></code></pre></div><h3 id="_2-2-vue文件结构" tabindex="-1">2.2 vue文件结构 <a class="header-anchor" href="#_2-2-vue文件结构" aria-label="Permalink to &quot;2.2 vue文件结构&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;!-- html --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export default {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">声明语言，并添加scoped</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;less&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-3-vue文件命名" tabindex="-1">2.3 vue文件命名 <a class="header-anchor" href="#_2-3-vue文件命名" aria-label="Permalink to &quot;2.3 vue文件命名&quot;">​</a></h3><p>文件名遵循驼峰标准，模块+功能，所以文件名至少包含2个单词，比如 <code>userList</code>、<code>memberAdd</code></p><h2 id="_3-script规范" tabindex="-1">3. script规范 <a class="header-anchor" href="#_3-script规范" aria-label="Permalink to &quot;3. script规范&quot;">​</a></h2><h3 id="_3-1-对象顺序" tabindex="-1">3.1 对象顺序 <a class="header-anchor" href="#_3-1-对象顺序" aria-label="Permalink to &quot;3.1 对象顺序&quot;">​</a></h3><p>一般来说，data和methods是使用最多，data有助于理清页面相关绑定数据，而methods是代码最多的</p><p>推荐data放最前，methods放最后，这样有利于阅读和查找代码</p><p>其它对象没有特殊要求，我个人习惯这样排</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  - data</span></span>
<span class="line"><span>  - props</span></span>
<span class="line"><span>  - components</span></span>
<span class="line"><span>  - computed</span></span>
<span class="line"><span>  - filter</span></span>
<span class="line"><span>  - watch</span></span>
<span class="line"><span>  - mounted</span></span>
<span class="line"><span>  - metods</span></span></code></pre></div><h3 id="_3-2-指令规范" tabindex="-1">3.2 指令规范 <a class="header-anchor" href="#_3-2-指令规范" aria-label="Permalink to &quot;3.2 指令规范&quot;">​</a></h3><ol><li>v-bind 和 v-on使用简写 :value 和 @click</li><li>v-for需加上key，并确保key是循环体内唯一的</li><li>对于大段落html使用v-if和v-else的，需加上注释标明开始和结束</li><li>无需刷新的数据用v-once</li><li>非必要情况不使用v-html</li></ol><h3 id="_3-3-emit事件规范" tabindex="-1">3.3 emit事件规范 <a class="header-anchor" href="#_3-3-emit事件规范" aria-label="Permalink to &quot;3.3 emit事件规范&quot;">​</a></h3><p>暴露给外部的回调事件，需符合html组件，使用简介明确的名称，比如 <code>click</code>、<code>onChange</code>、<code>onSuccess</code></p><p>用户主动触发的事件，使用动作单词，如 <code>click</code>、<code>input</code></p><p>非用户主动触发的事件，是用 on+事件名称，如 <code>onFail</code>、<code>onClose</code></p><p>禁止使用复杂命名，比如 <code>goMemberDetail</code>、<code>submitComment</code>、<code>goCustomer</code></p><h3 id="_3-4-props规范" tabindex="-1">3.4 props规范 <a class="header-anchor" href="#_3-4-props规范" aria-label="Permalink to &quot;3.4 props规范&quot;">​</a></h3><p>禁止不定义参数类型，<code>props: [&#39;status&#39;]</code></p><p>除了类型外，建议带上注释和默认值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否显示[步骤1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showStep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-注释规范" tabindex="-1">4. 注释规范 <a class="header-anchor" href="#_4-注释规范" aria-label="Permalink to &quot;4. 注释规范&quot;">​</a></h2><p>以下场景必须添加注释</p><ol><li>通用组件使用说明</li><li>函数说明</li><li>复杂业务逻辑说明</li><li>存在已知问题的代码</li><li>复杂 if 判断</li><li></li></ol><h3 id="_4-1-函数注释" tabindex="-1">4.1 函数注释 <a class="header-anchor" href="#_4-1-函数注释" aria-label="Permalink to &quot;4.1 函数注释&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * 方法名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 从属模块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@desc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 描述</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 作者</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@date</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 2019-7-22 16:40:23</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [title]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    - 参数说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [columns]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回数据说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 调用示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  *  getById(xxx)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  **/</span></span></code></pre></div><p>简单的函数，可以描述以下具体作用即可，推荐加上参数说明和参数类型</p><h3 id="_4-2-todo注释" tabindex="-1">4.2 TODO注释 <a class="header-anchor" href="#_4-2-todo注释" aria-label="Permalink to &quot;4.2 TODO注释&quot;">​</a></h3><p>等待完善的代码，建议加上 TODO，附上未完成的功能说明 如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TODO 未加异常判断</span></span></code></pre></div><p>另外还有 FIXME，在一些已知问题代码，并优先度较高的，可加此注释，每次发版本前搜一下有没遗忘</p><h2 id="_5-css规范" tabindex="-1">5. CSS规范 <a class="header-anchor" href="#_5-css规范" aria-label="Permalink to &quot;5. CSS规范&quot;">​</a></h2><ol><li>CSS能做的不用JS</li><li>数值为0时不加单位，如<code>0px</code>应写为<code>0</code></li><li>组件内用scoped作用域</li><li></li></ol><p>待补充</p>`,40),e=[p];function t(h,k,d,r,c,o){return i(),a("div",{"data-pagefind-body":!0},e)}const y=s(l,[["render",t]]);export{g as __pageData,y as default};

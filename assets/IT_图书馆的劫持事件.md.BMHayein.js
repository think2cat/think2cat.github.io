import{_ as s,c as i,o as t,a7 as n}from"./chunks/framework.SbOxrpL8.js";const c=JSON.parse('{"title":"图书馆的\\"劫持事件\\"：MongoDB死锁危机与预防","description":"","frontmatter":{"title":"图书馆的\\"劫持事件\\"：MongoDB死锁危机与预防","date":"2025-04-02T22:52:08.000Z","tags":["MondoDB","DB"],"categories":["IT"]},"headers":[],"relativePath":"IT/图书馆的劫持事件.md","filePath":"IT/图书馆的劫持事件.md","lastUpdated":1758466514000}'),a={name:"IT/图书馆的劫持事件.md"},p=n(`<p><strong>突发状况：图书馆陷入僵局</strong></p><p>周一下午三点，图书馆的《三体》专区突然陷入奇怪的僵局。</p><p>学生A紧紧抱着《三体I》，对着管理员大喊：&quot;我要借《三体II》，但那个同学不放手！&quot;</p><p>学生B死死攥着《三体II》，急得跳脚：&quot;他不先把《三体I》给我，我就不还《三体II》！&quot;</p><p>两人大眼瞪小眼，谁也不肯先放手。后面的队伍越排越长，整个科幻区完全卡住。</p><p><strong>这就是现实版死锁现场</strong>——像极了MongoDB中多个事务互相等待对方释放锁的场景。</p><p><strong>死锁的四大&quot;罪魁祸首&quot;</strong></p><p>为什么会出现这种僵局？其实需要四个条件同时满足：</p><ol><li><p><strong>互斥条件</strong> - 《三体》系列每次只能借给一个人（资源独占）</p></li><li><p><strong>占有等待</strong> - 两人都拿着一本不肯还，同时等着另一本（持有资源并请求新资源）</p></li><li><p><strong>不可剥夺</strong> - 管理员不能强行从学生手里抢书（资源不可强制回收）</p></li><li><p><strong>循环等待</strong> - A等B的《三体II》，B等A的《三体I》（等待环形成）</p></li></ol><p>这就好比MongoDB中的两个事务：</p><p>事务1：先锁文档A，再请求锁文档B 事务2：先锁文档B，再请求锁文档A 双方互相等待，死锁形成</p><p><strong>破解死锁：图书馆员的三大妙招</strong></p><p><strong>方法一：超时自动释放（等不了就别等了）</strong></p><p>图书馆规定：<strong>任何借书请求最多等待5分钟</strong>，超时就必须先释放已持有的书。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置锁请求超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adminCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setParameter: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxTransactionLockRequestTimeoutMillis: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>方法二：资源排序法（按编号借书）</strong> 图书馆出新规：<strong>借《三体》必须按I、II、III顺序申请，不允许跳着借。</strong></p><p>这样学生A会先借《三体I》，学生B想借《三体II》也必须先申请《三体I》——但发现已被借走，就只能等待。</p><p>在MongoDB中，<strong>始终按固定顺序访问文档</strong> 就能避免大部分死锁。</p><p><strong>方法三：死锁检测（管理员介入）</strong></p><p>智能系统发现循环等待时，管理员果断介入：<strong>随机选择一位&quot;幸运读者&quot;终止其借书权限。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询当前操作寻找阻塞</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;waitingForLock&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必要时终止操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">killOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opid)</span></span></code></pre></div><p>**预防死锁的借阅小贴士预防死锁的借阅小贴士</p><ol><li><strong>一次借全</strong>：需要《三体》全集？一次性申请所有三本，别分多次借</li><li><strong>速借速还</strong>：尽量减少持书时间，看完赶紧还</li><li><strong>避免高峰</strong>：别在课间休息时抢热门书，找个冷门时间再来</li><li>​<strong>提前规划</strong>：想好要借什么书，按顺序拿取</li></ol><p><strong>现实思考</strong> 现在回到图书馆现场：管理员启用&quot;超时释放&quot;策略，5分钟后学生A主动归还了《三体I》，僵局打破，《三体II》终于顺利流通。</p><p><strong>这就像MongoDB的WiredTiger存储引擎</strong>，会自动检测死锁并回滚其中一个事务。</p><p>但最好的策略永远是预防——<strong>设计合理的访问顺序</strong>，就像图书馆引导大家按顺序借书一样，能从根源上避免死锁发生。</p>`,26),o=[p];function l(e,r,g,h,k,d){return t(),i("div",{"data-pagefind-body":!0},o)}const _=s(a,[["render",l]]);export{c as __pageData,_ as default};

import{_ as s,o as i,c as a,a7 as n}from"./chunks/framework.Z1Dznsxj.js";const c=JSON.parse('{"title":"深入解读MongoDB事务：从基础到优化","description":"","frontmatter":{"title":"深入解读MongoDB事务：从基础到优化","tags":["MongoDB","DB","优化"],"categories":["IT"],"date":"2024-05-25T23:54:27.000Z"},"headers":[],"relativePath":"IT/深入解读MongoDB事务.md","filePath":"IT/深入解读MongoDB事务.md","lastUpdated":1719711816000}'),h={name:"IT/深入解读MongoDB事务.md"},l=n(`<h2 id="_1-引言" tabindex="-1">1. 引言 <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;1. 引言&quot;">​</a></h2><p>MongoDB在4.0版本引入了对多文档事务的支持，这一特性使得开发者能够在一个事务中操作多个文档和集合，确保这些操作的原子性和一致性。这对于构建复杂的应用程序和保证数据完整性至关重要。</p><h3 id="什么是事务" tabindex="-1">什么是事务 <a class="header-anchor" href="#什么是事务" aria-label="Permalink to &quot;什么是事务&quot;">​</a></h3><p>事务是数据库一系列操作的集合，视为一个逻辑单元。当全部操作成功时，事务才算操作成功；如果其中某一操作失败，则视为整体失败，数据会回滚到未执行前的状态。</p><p>假设某玩家消费100金币买了一个装备</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TRANSACTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开始事务，一系列操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 账户金币减掉100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 装备库存减1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 456</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 用户装备增加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weapons (account_id, product_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如果玩家的金币扣了，但装备已经没有库存，购买失败，则整个操作失败，扣掉的金币要还回去。</p><h4 id="acid特性" tabindex="-1">ACID特性 <a class="header-anchor" href="#acid特性" aria-label="Permalink to &quot;ACID特性&quot;">​</a></h4><p>ACID是数据库事务四个重要特征</p><ol><li><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部完成，要么全部不执行。如果事务在执行过程中遇到错误，所有已经执行的操作都必须回滚到事务开始之前的状态。这确保了数据库不会处于部分更新的状态。 例如：一个银行转账操作，如果扣款成功但未成功入账，整个操作会被回滚，账户余额恢复到初始状态。</li><li><strong>一致性（Consistency）</strong>：事务执行前后，数据库都必须保持一致的状态。所有的业务规则、约束和触发器都必须得到满足，确保数据库从一个有效状态转变到另一个有效状态。 例如：转账操作前后，账户总余额应保持不变。</li><li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的操作对其他事务是隔离的。事务的中间状态对其他事务是不可见的，只有在事务提交后，其结果才会对其他事务可见。 例如：一个用户在读取数据时不会看到其他未提交事务的修改。</li><li><strong>持久性（Durability）</strong>：一旦事务提交，它对数据库的改变是永久性的，即使系统发生故障，也不会丢失。事务的结果会被持久地保存到存储介质中。 例如：已完成的转账记录在系统重启后仍然存在。</li></ol><h2 id="_2-mongodb事务简介" tabindex="-1">2. MongoDB事务简介 <a class="header-anchor" href="#_2-mongodb事务简介" aria-label="Permalink to &quot;2. MongoDB事务简介&quot;">​</a></h2><p>MongoDB在4.0版本引入了对多文档事务的支持，使开发者能够在同一个事务中操作多个文档和集合，保证这些操作的原子性和一致性。</p><h3 id="历史版本" tabindex="-1">历史版本 <a class="header-anchor" href="#历史版本" aria-label="Permalink to &quot;历史版本&quot;">​</a></h3><ul><li><strong>MongoDB 3.0及之前</strong>：仅支持单文档级别的原子操作，不支持多文档事务</li><li><strong>MongoDB 4.0</strong>：引入了副本集环境下的多文档事务支持</li><li><strong>MongoDB 4.2</strong>：扩展了对分片集群环境下的多文档事务支持。</li></ul><h2 id="_3-使用事务" tabindex="-1">3. 使用事务 <a class="header-anchor" href="#_3-使用事务" aria-label="Permalink to &quot;3. 使用事务&quot;">​</a></h2><h3 id="启动和提交事务" tabindex="-1">启动和提交事务 <a class="header-anchor" href="#启动和提交事务" aria-label="Permalink to &quot;启动和提交事务&quot;">​</a></h3><ul><li>启动会话：<code>MongoClient.startSession()</code></li><li>启动事务：在会话对象上调用 <code>startTransaction()</code> 方法来启动事务</li><li>执行操作：在会话中执行一系列数据库操作（插入、更新、删除等）</li><li>提交事务：在成功完成所有操作后调用 <code>session.commitTransaction()</code> 提交事务</li><li>回滚事务：如果遇到错误，调用 <code>session.abortTransaction()</code> 回滚事务</li><li>结束会话：<code>session.endSession()</code></li></ul><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><p>以下代码演示了如何在MongoDB中使用事务</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accountsCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;accounts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> productsCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;products&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weaponsCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weapons&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 扣金币操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accountUpdateResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accountsCollection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { account_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { $inc: { balance: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { session }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (accountUpdateResult.matchedCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accountUpdateResult.modifiedCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Account update failed or no account found.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 减少库存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> productUpdateResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productsCollection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { product_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stock: { $gt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { $inc: { stock: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { session }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (productUpdateResult.matchedCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productUpdateResult.modifiedCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Product update failed or no product found.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 增加用户装备</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weaponInsertResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weaponsCollection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { account_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, product_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { session }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (weaponInsertResult.insertedCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Weapon insert failed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commitTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Transaction committed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abortTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Transaction aborted due to an error: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="_4-锁的基本概念" tabindex="-1">4. 锁的基本概念 <a class="header-anchor" href="#_4-锁的基本概念" aria-label="Permalink to &quot;4. 锁的基本概念&quot;">​</a></h2><p>事务的实现离不开锁的作用，数据库的锁是一种机制，用于控制数据并发访问时，保持数据的一致性和完整性，防止并发读写数据造成的竞争和冲突</p><h3 id="什么是锁" tabindex="-1">什么是锁 <a class="header-anchor" href="#什么是锁" aria-label="Permalink to &quot;什么是锁&quot;">​</a></h3><p>锁是数据库中用于管理并发访问和维护数据一致性的一种机制。通过锁，可以确保多个事务在并发执行时不会相互干扰，从而保证数据的一致性和完整性。</p><p>图书馆里来了一些新书，好些人去借书，当你在书架一行行的找时，突然来了个人，一下就拿走了几本，碰巧就有你找的那本书，于是你把那人揍了一顿。</p><p>第二天图书馆发布了新规矩，一个书架只能同时一个人能借书，排队拿钥匙，有钥匙的人可去找书，不管有没找到，其他人不能进去找，只有等到钥匙归还后，第二人才能接着去找书。</p><p>这就是锁，避免了冲突的发生，但同时也带来了性能的问题。</p><p>锁的分类方式多种多样，主要根据锁定粒度、锁的模式、持有时间、特性、作用范围和实现机制等因素进行分类。</p><h3 id="mongodb支持锁的模式" tabindex="-1">MongoDB支持锁的模式 <a class="header-anchor" href="#mongodb支持锁的模式" aria-label="Permalink to &quot;MongoDB支持锁的模式&quot;">​</a></h3><ol><li><strong>共享锁（S）</strong>：用于读操作，允许多个事务并发读取。</li><li><strong>排他锁（X）</strong>：用于写操作，阻止其他事务读取或写入。</li><li><strong>意向共享锁（IS）</strong>：用于表示有读取的意图，允许多个意向共享锁和意向排他锁。</li><li><strong>意向排他锁（IX）</strong>：用于表示有写入的意图，允许多个意向排他锁，阻止共享锁和排他锁。</li></ol><h3 id="锁的影响" tabindex="-1">锁的影响 <a class="header-anchor" href="#锁的影响" aria-label="Permalink to &quot;锁的影响&quot;">​</a></h3><p>优点：</p><ul><li>锁的设计保证了数据的一致性和完整性，并能有效控制并发操作。</li></ul><p>缺点：</p><ul><li><strong>性能开销</strong>，上锁和解锁需要时间，在高并发下，多个事务争抢相同资源，会增加等待时间，降低性能</li><li><strong>资源开销</strong>，维护锁的信息，即需要消耗内存资源，也需要CPU资源</li><li><strong>死锁</strong>，多个事务在相互等待对方释放锁时，则会造成死锁</li></ul><h2 id="_5-事务的其它依赖" tabindex="-1">5. 事务的其它依赖 <a class="header-anchor" href="#_5-事务的其它依赖" aria-label="Permalink to &quot;5. 事务的其它依赖&quot;">​</a></h2><p>锁只是事务实现的一部分，完整实现还依赖于日志记录、版本控制等其他机制。</p><h3 id="日志记录-write-ahead-logging-wal" tabindex="-1">日志记录（Write-Ahead Logging, WAL） <a class="header-anchor" href="#日志记录-write-ahead-logging-wal" aria-label="Permalink to &quot;日志记录（Write-Ahead Logging, WAL）&quot;">​</a></h3><p>日志记录是指在事务对数据库进行修改之前，先将这些修改操作记录到日志中。这样，即使在系统崩溃后，数据库也可以根据日志来恢复未完成的事务，确保数据的一致性和持久性。</p><p><strong>作用</strong></p><ul><li><strong>原子性</strong>：如果事务失败，可以使用日志回滚操作，将数据库恢复到事务开始之前的状态。</li><li><strong>持久性</strong>：一旦事务提交，其日志记录会被持久化到磁盘，即使系统崩溃，事务的结果也不会丢失。</li></ul><h3 id="版本控制-multi-version-concurrency-control-mvcc" tabindex="-1">版本控制（Multi-Version Concurrency Control, MVCC） <a class="header-anchor" href="#版本控制-multi-version-concurrency-control-mvcc" aria-label="Permalink to &quot;版本控制（Multi-Version Concurrency Control, MVCC）&quot;">​</a></h3><p>通过维护数据的多个版本来管理并发控制。每当一个事务对数据进行修改时，系统会创建一个新版本的数据，而旧版本仍然保留。这使得读操作可以读取旧版本的数据，而不受正在进行的写操作的影响，从而提高并发性能。</p><p><strong>作用</strong></p><ul><li><strong>隔离性</strong>：不同事务可以读取数据的不同版本，从而避免读写冲突。</li><li><strong>一致性</strong>：每个事务在其开始时获取数据的快照，确保在整个事务过程中读取到一致的数据。</li></ul><h2 id="_6-事务优化" tabindex="-1">6. 事务优化 <a class="header-anchor" href="#_6-事务优化" aria-label="Permalink to &quot;6. 事务优化&quot;">​</a></h2><h3 id="_1-事务尽可能短" tabindex="-1">1. 事务尽可能短 <a class="header-anchor" href="#_1-事务尽可能短" aria-label="Permalink to &quot;1. 事务尽可能短&quot;">​</a></h3><p>事务太长会占用锁的时间，影响其他并发操作。因此，大事务应尽量拆分为小事务，并确保小事务的执行时间尽可能短。</p><h3 id="_2-减少锁的范围和争用" tabindex="-1">2. 减少锁的范围和争用 <a class="header-anchor" href="#_2-减少锁的范围和争用" aria-label="Permalink to &quot;2. 减少锁的范围和争用&quot;">​</a></h3><p>过多锁会影响性能，减少锁的使用，并精细化使用锁，能用文档锁就不使用集合锁。</p><h3 id="_3-避免高冲突的操作" tabindex="-1">3. 避免高冲突的操作 <a class="header-anchor" href="#_3-避免高冲突的操作" aria-label="Permalink to &quot;3. 避免高冲突的操作&quot;">​</a></h3><p>高并发访问同一资源容易造成锁冲突，甚至死锁。可以使用队列来处理频繁抢占的资源，并将数据分区或分片，减少并发冲突。</p><h3 id="_4-提前校验和准备" tabindex="-1">4. 提前校验和准备 <a class="header-anchor" href="#_4-提前校验和准备" aria-label="Permalink to &quot;4. 提前校验和准备&quot;">​</a></h3><p>能在外部获取的数据，应提前准备好，缩短事务运行时间，同时避免在事务中进行不必要的数据校验。</p><h3 id="_5-使用适当的隔离级别" tabindex="-1">5. 使用适当的隔离级别 <a class="header-anchor" href="#_5-使用适当的隔离级别" aria-label="Permalink to &quot;5. 使用适当的隔离级别&quot;">​</a></h3><p>较高的隔离级别会导致其他锁的延迟，所以尽量选择合适的读级别锁或写级别锁。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过设计良好的数据模型、适当的索引、精简的事务逻辑以及合适的读写关注级别，开发者可以有效提升MongoDB事务的执行效率。在实际项目中，监控和调优事务性能也是必不可少的步骤，能够帮助识别潜在问题并及时改进。</p><p>总之，充分理解MongoDB事务的工作原理和优化方法，将有助于开发者构建更可靠、更高效的数据库应用。希望本篇文章能为您在MongoDB事务的应用和优化上提供有价值的参考和指导。</p>`,59),t=[l];function k(p,e,r,E,o,d){return i(),a("div",{"data-pagefind-body":!0},t)}const y=s(h,[["render",k]]);export{c as __pageData,y as default};

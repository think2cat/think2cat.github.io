<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猫大叔</title>
  
  <subtitle>关注前端，热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://21ido.com/"/>
  <updated>2024-07-09T12:15:00.706Z</updated>
  <id>http://21ido.com/</id>
  
  <author>
    <name>猫大叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从图书馆借书到MongoDB锁：一文看懂锁机制</title>
    <link href="http://21ido.com/2024/06/c6a8bf4d/"/>
    <id>http://21ido.com/2024/06/c6a8bf4d/</id>
    <published>2024-06-16T03:46:37.000Z</published>
    <updated>2024-07-09T12:15:00.706Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是锁&quot;&gt;&lt;a href=&quot;#什么是锁&quot; class=&quot;headerlink&quot; title=&quot;什么是锁&quot;&gt;&lt;/a&gt;什么是锁&lt;/h2&gt;&lt;p&gt;锁是一种机制，用于管理并发访问和维护数据一致性。它确保多个操作不会同时修改相同的数据，从而避免数据冲突。&lt;/p&gt;
&lt;p&gt;假设图书馆里有一批热门书籍，很多人都想借阅。图书馆为了管理这些书籍的借阅过程，引入了不同类型的“锁”。&lt;/p&gt;
&lt;h2 id=&quot;锁的种类&quot;&gt;&lt;a href=&quot;#锁的种类&quot; class=&quot;headerlink&quot; title=&quot;锁的种类&quot;&gt;&lt;/a&gt;锁的种类&lt;/h2&gt;&lt;h3 id=&quot;1-共享锁（S锁）&quot;&gt;&lt;a href=&quot;#1-共享锁（S锁）&quot; class=&quot;headerlink&quot; title=&quot;1. 共享锁（S锁）&quot;&gt;&lt;/a&gt;1. 共享锁（S锁）&lt;/h3&gt;&lt;p&gt;共享锁允许多个事务并发读取同一数据，但不能进行写操作。读读不互斥，多个事务可以同时获取共享锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;图书馆允许多个人同时阅读同一本书，但不能带走。也就是说，书架上的书可以被很多人同时拿下来翻阅，但不能被借走。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-排他锁（X锁）&quot;&gt;&lt;a href=&quot;#2-排他锁（X锁）&quot; class=&quot;headerlink&quot; title=&quot;2.排他锁（X锁）&quot;&gt;&lt;/a&gt;2.排他锁（X锁）&lt;/h3&gt;&lt;p&gt;排他锁允许一个事务进行写操作，同时阻止其他事务读取或写入。写写互斥，读写互斥，只有一个事务能持有排他锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;图书馆规定，当一个人借书时，其他人不能同时借这本书，也不能翻阅这本书。借书的人会把书从书架上拿走，直到他归还后，其他人才可以继续借阅或查看这本书。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-意向共享锁（IS锁）&quot;&gt;&lt;a href=&quot;#3-意向共享锁（IS锁）&quot; class=&quot;headerlink&quot; title=&quot;3.意向共享锁（IS锁）&quot;&gt;&lt;/a&gt;3.意向共享锁（IS锁）&lt;/h3&gt;&lt;p&gt;意向共享锁表示一个事务有读取某些资源的意图。多个事务可以同时获取意向共享锁和意向排他锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;图书馆规定，一个人如果计划去翻阅某本书，他可以提前在图书馆的系统里登记自己的意图，这样系统知道将来可能会有很多人同时查看这本书。登记意图的人还没有拿到书，但图书馆知道他有这个计划。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-意向排他锁（IX锁）&quot;&gt;&lt;a href=&quot;#4-意向排他锁（IX锁）&quot; class=&quot;headerlink&quot; title=&quot;4.意向排他锁（IX锁）&quot;&gt;&lt;/a&gt;4.意向排他锁（IX锁）&lt;/h3&gt;&lt;p&gt;意向排他锁表示一个事务有写入某些资源的意图。多个事务可以同时获取意向排他锁，但不能获取共享锁或排他锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;图书馆规定，一个人如果计划去借某本书，他可以提前在图书馆的系统里登记自己的意图，这样系统知道将来可能会有很多人要借这本书。登记意图的人还没有拿到书，但图书馆知道他有这个计划。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;图书馆场景&quot;&gt;&lt;a href=&quot;#图书馆场景&quot; class=&quot;headerlink&quot; title=&quot;图书馆场景&quot;&gt;&lt;/a&gt;图书馆场景&lt;/h3&gt;&lt;p&gt;假设图书馆里有一本《哈利波特与数据结构》的书，多个读者对这本书感兴趣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共享锁（S锁）：&lt;/strong&gt;&lt;br&gt;多个读者可以同时在图书馆翻阅《哈利波特与数据结构》，但不能借走。&lt;br&gt;
    
    </summary>
    
      <category term="IT" scheme="http://21ido.com/categories/IT/"/>
    
    
      <category term="MongoDB" scheme="http://21ido.com/tags/MongoDB/"/>
    
      <category term="DB" scheme="http://21ido.com/tags/DB/"/>
    
      <category term="数据库锁" scheme="http://21ido.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>深入解读MongoDB事务：从基础到优化</title>
    <link href="http://21ido.com/2024/05/42fc09e2/"/>
    <id>http://21ido.com/2024/05/42fc09e2/</id>
    <published>2024-05-25T15:54:27.000Z</published>
    <updated>2024-07-09T12:15:00.706Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1. 引言&quot;&gt;&lt;/a&gt;1. 引言&lt;/h2&gt;&lt;p&gt;MongoDB在4.0版本引入了对多文档事务的支持，这一特性使得开发者能够在一个事务中操作多个文档和集合，确保这些操作的原子性和一致性。这对于构建复杂的应用程序和保证数据完整性至关重要。&lt;/p&gt;
&lt;h3 id=&quot;什么是事务&quot;&gt;&lt;a href=&quot;#什么是事务&quot; class=&quot;headerlink&quot; title=&quot;什么是事务&quot;&gt;&lt;/a&gt;什么是事务&lt;/h3&gt;&lt;p&gt;事务是数据库一系列操作的集合，视为一个逻辑单元。当全部操作成功时，事务才算操作成功；如果其中某一操作失败，则视为整体失败，数据会回滚到未执行前的状态。&lt;/p&gt;
&lt;p&gt;假设某玩家消费100金币买了一个装备&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;BEGIN&lt;/span&gt; TRANSACTION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 开始事务，一系列操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 账户金币减掉100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; accounts &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; balance &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; account_id &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 装备库存减1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; products &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; stock &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; stock &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; product_id &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; stock &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 用户装备增加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; weapons (account_id, product_id) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 提交事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;COMMIT&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果玩家的金币扣了，但装备已经没有库存，购买失败，则整个操作失败，扣掉的金币要还回去。&lt;/p&gt;
&lt;h4 id=&quot;ACID特性&quot;&gt;&lt;a href=&quot;#ACID特性&quot; class=&quot;headerlink&quot; title=&quot;ACID特性&quot;&gt;&lt;/a&gt;ACID特性&lt;/h4&gt;&lt;p&gt;ACID是数据库事务四个重要特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;原子性（Atomicity）&lt;/strong&gt;：事务中的所有操作要么全部完成，要么全部不执行。如果事务在执行过程中遇到错误，所有已经执行的操作都必须回滚到事务开始之前的状态。这确保了数据库不会处于部分更新的状态。&lt;br&gt;例如：一个银行转账操作，如果扣款成功但未成功入账，整个操作会被回滚，账户余额恢复到初始状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;：事务执行前后，数据库都必须保持一致的状态。所有的业务规则、约束和触发器都必须得到满足，确保数据库从一个有效状态转变到另一个有效状态。&lt;br&gt;例如：转账操作前后，账户总余额应保持不变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性（Isolation）&lt;/strong&gt;：多个事务并发执行时，一个事务的操作对其他事务是隔离的。事务的中间状态对其他事务是不可见的，只有在事务提交后，其结果才会对其他事务可见。&lt;br&gt;例如：一个用户在读取数据时不会看到其他未提交事务的修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性（Durability）&lt;/strong&gt;：一旦事务提交，它对数据库的改变是永久性的，即使系统发生故障，也不会丢失。事务的结果会被持久地保存到存储介质中。&lt;br&gt;例如：已完成的转账记录在系统重启后仍然存在。
    
    </summary>
    
      <category term="IT" scheme="http://21ido.com/categories/IT/"/>
    
    
      <category term="MongoDB" scheme="http://21ido.com/tags/MongoDB/"/>
    
      <category term="DB" scheme="http://21ido.com/tags/DB/"/>
    
      <category term="优化" scheme="http://21ido.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>篡改猴脚本教程之ajax劫持</title>
    <link href="http://21ido.com/2024/05/44bb9485/"/>
    <id>http://21ido.com/2024/05/44bb9485/</id>
    <published>2024-05-03T07:36:05.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;篡改猴，最强浏览器扩展，英文名Tampermonkey，最早出现在Firefox，名叫油猴（Greasemonkey ），两者有相似的功能和脚本语法，但并非同个扩展。&lt;/p&gt;
&lt;p&gt;可以在页面注入JS脚本，实现一些功能。&lt;/p&gt;
&lt;p&gt;最早写脚本始于18年玩新浪微博时，由于每次打开都会弹出安装Flash插件的提示，所以写了个脚本把提示窗移除。&lt;/p&gt;
&lt;p&gt;本文以修改表格数据列为例，简单介绍篡改猴脚本开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2024/05/monkey_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;目标页面，缺少金额数据，每次查看都要点详情进去，很不方便，更不利于对比，所以想直接显示在外面表格。&lt;/p&gt;
&lt;p&gt;本例因涉及集团内部系统，只讲重点代码和注意点，不展示完整代码。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="js" scheme="http://21ido.com/tags/js/"/>
    
      <category term="Tampermonkey" scheme="http://21ido.com/tags/Tampermonkey/"/>
    
  </entry>
  
  <entry>
    <title>Beacon API 前端开发中的异步数据传输利器</title>
    <link href="http://21ido.com/2024/04/db296fb2/"/>
    <id>http://21ido.com/2024/04/db296fb2/</id>
    <published>2024-04-12T14:09:05.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Beacon API 是一种用于在浏览器中异步发送数据的 Web API。它通常用于在页面关闭前发送一些数据，以确保这些数据不会因为页面的关闭而丢失。&lt;/p&gt;
&lt;h2 id=&quot;1-工作机制&quot;&gt;&lt;a href=&quot;#1-工作机制&quot; class=&quot;headerlink&quot; title=&quot;1. 工作机制&quot;&gt;&lt;/a&gt;1. 工作机制&lt;/h2&gt;&lt;p&gt;当用户关闭页面后，浏览器会执行一些幕后工作，比如关闭页面相关资源、清理页面状态，还有比如检查是否有未发送的Beacon请求，并尝试去发送请求，这些都是在后台线程进行，所以并不会阻碍页面的关闭。&lt;/p&gt;
&lt;p&gt;而 Beacon API 正是因为浏览器这种后台机制，使得页面关闭后依然可以发送请求。&lt;/p&gt;
&lt;h2 id=&quot;2-特点&quot;&gt;&lt;a href=&quot;#2-特点&quot; class=&quot;headerlink&quot; title=&quot;2. 特点&quot;&gt;&lt;/a&gt;2. 特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;异步非阻塞&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调用接口后，无需等待服务器响应，而是把网络请求加入队列，不会影响页面代码执行和用户体验。&lt;br&gt;加入队列后，浏览器会等网络空闲进行请求，不影响页面中其它资源的网络传输&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;数据缓存&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加入队列后，需要发送的数据将被缓存起来，从而避免页面关闭造成数据丢失&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;支持多种数据格式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;允许发送的数据格式有String、ArrayBuffer、TypedArray、DataView、ReadableStream、Blob、FormData对象和URLSearchParams&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;strong&gt;请求结果无通知和提示&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;静默执行，请求成功或失败，浏览器都不会有提示&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="js" scheme="http://21ido.com/tags/js/"/>
    
      <category term="Beacon" scheme="http://21ido.com/tags/Beacon/"/>
    
  </entry>
  
  <entry>
    <title>深入理解HTTP重定向：从301到308状态码全解析</title>
    <link href="http://21ido.com/2024/03/8563c276/"/>
    <id>http://21ido.com/2024/03/8563c276/</id>
    <published>2024-03-26T09:16:06.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;从HTTP状态码的基本概念开始，逐步介绍不同类型的重定向及其应用场景。无论您是初学者还是有经验的开发人员，都能从本文中获得实用的知识和技巧。&lt;/p&gt;
&lt;h3 id=&quot;1-http状态码&quot;&gt;&lt;a href=&quot;#1-http状态码&quot; class=&quot;headerlink&quot; title=&quot;1. http状态码&quot;&gt;&lt;/a&gt;1. http状态码&lt;/h3&gt;&lt;p&gt;http状态码是客户端和服务器端进行http通讯时，服务端发给客户端的数字代码（3位数字组成），用于表示服务器对请求的处理结果，比如常见的404&lt;/p&gt;
&lt;h3 id=&quot;2-http重定向&quot;&gt;&lt;a href=&quot;#2-http重定向&quot; class=&quot;headerlink&quot; title=&quot;2. http重定向&quot;&gt;&lt;/a&gt;2. http重定向&lt;/h3&gt;&lt;p&gt;http重定向是服务端返回的处理结果中一种，用于指示客户端请求的资源在其它位置&lt;/p&gt;
&lt;p&gt;http重定向的状态码为 3xx，常见的有301和303&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;301 Moved Permanently&lt;/strong&gt; 永久重定向，应该更新资源地址，以便下次直接请求到新位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;302 Found&lt;/strong&gt; 临时重定向，保持原始请求方法（Get/Post）来获取新位置的资源，可能会被浏览器缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;303 See Other&lt;/strong&gt; 临时重定向，使用Get方法获取新位置的资源，不会被浏览器缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;307 Temporary Redirect&lt;/strong&gt; 临时重定向，跟302的行为一致，比302更加严格的要求使用相同http方法去请求新位置的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;308 Permanent Redirect&lt;/strong&gt; 永久重定向，跟301类似，强调保留原始请求的http方法（Get/Post）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;300 Multiple Choices&lt;/strong&gt; 多重选择，服务端会返回多个URI的列表，由客户端选择&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;304 Not Modified&lt;/strong&gt; 未修改，表示请求资源自上次请求之后未修改，可以直接从缓存获取&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="web" scheme="http://21ido.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>深入理解node.js模块</title>
    <link href="http://21ido.com/2024/03/69025b32/"/>
    <id>http://21ido.com/2024/03/69025b32/</id>
    <published>2024-03-09T15:19:56.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript的思想是一切皆对象，而Node.js编程是基于模块化思想的。&lt;/p&gt;
&lt;h3 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 基本概念&quot;&gt;&lt;/a&gt;1. 基本概念&lt;/h3&gt;&lt;p&gt;Node.js采用了CommonJS模块系统，每个文件都是一个独立的模块，每个模块都有自己的作用域，可以有自己的变量和函数。这种模块化的设计使得代码更易于组织、维护和重用。&lt;/p&gt;
&lt;p&gt;通过模块化，开发者可以将复杂的程序拆分成小的、独立的模块，每个模块专注于特定的功能。这样做有助于降低代码的耦合度，提高代码的可读性和可维护性。&lt;/p&gt;
&lt;p&gt;此外，Node.js的模块化设计还支持模块之间的依赖管理，使得开发者可以方便地引入其他模块提供的功能。&lt;/p&gt;
&lt;h3 id=&quot;2-模块实现&quot;&gt;&lt;a href=&quot;#2-模块实现&quot; class=&quot;headerlink&quot; title=&quot;2. 模块实现&quot;&gt;&lt;/a&gt;2. 模块实现&lt;/h3&gt;&lt;p&gt;模块代码默认是私有的，不会污染全局作用域&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;module.exports&lt;/code&gt; 或者 &lt;code&gt;exports&lt;/code&gt; 导出模块中变量、函数或对象&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// hello.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个函数，用于输出&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将函数导出，以便其他文件可以使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;exports&lt;/span&gt; = sayHello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码定义了 &lt;code&gt;sayHello&lt;/code&gt; 函数，并通过 &lt;code&gt;module.exports&lt;/code&gt; 暴露接口，使得其它文件可以引入并调用&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
      <category term="nodejs" scheme="http://21ido.com/categories/Web/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://21ido.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="es6" scheme="http://21ido.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>npm、yarn和pnpm的古往今来</title>
    <link href="http://21ido.com/2023/12/4fefd04c/"/>
    <id>http://21ido.com/2023/12/4fefd04c/</id>
    <published>2023-12-14T13:36:52.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;I-引言&quot;&gt;&lt;a href=&quot;#I-引言&quot; class=&quot;headerlink&quot; title=&quot;I. 引言&quot;&gt;&lt;/a&gt;I. 引言&lt;/h3&gt;&lt;p&gt;本文将深入探讨这三种包管理工具的背景、特点和使用场景，以帮助读者更好地了解它们，为自己的项目选择合适的工具。从最初的 Node.js 发布到包管理工具的崛起和不断演进，我们将带您一一解读，探索它们背后的故事和技术细节。&lt;/p&gt;
&lt;p&gt;无论您是新手开发者还是资深工程师，相信本文都能为您带来一些有价值的信息和启发。让我们一起探索 npm、Yarn 和 PNPM 的世界，为我们的项目选择最佳伙伴！&lt;/p&gt;
&lt;h4 id=&quot;1-npm背景介绍&quot;&gt;&lt;a href=&quot;#1-npm背景介绍&quot; class=&quot;headerlink&quot; title=&quot;1. npm背景介绍&quot;&gt;&lt;/a&gt;1. npm背景介绍&lt;/h4&gt;&lt;p&gt;Node.js的第一个版本是由Ryan Dahl创建的，最初发布于2009年5月27日&lt;br&gt;该版本基于v8引擎，提供了一个事件驱动、非阻塞I/O环境，使得JS可以运行在服务器环境下&lt;br&gt;而为了解决node.js生态系统中包的管理问题，在2010年，Isaac Z. Schlueter发布了npm&lt;/p&gt;
&lt;h4 id=&quot;2-包管理工具的重要性&quot;&gt;&lt;a href=&quot;#2-包管理工具的重要性&quot; class=&quot;headerlink&quot; title=&quot;2. 包管理工具的重要性&quot;&gt;&lt;/a&gt;2. 包管理工具的重要性&lt;/h4&gt;&lt;p&gt;包管理工具在现代软件开发中是不可或缺的一部分，其重要性体现在以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;&lt;br&gt;软件开发通常依赖于许多第三方库和工具。包管理工具能够方便地安装、更新和卸载这些依赖，确保项目能够顺利运行并保持最新状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版本控制&lt;/strong&gt;&lt;br&gt;包管理工具提供了对依赖项版本的控制机制。通过语义化版本控制（Semantic Versioning），开发者能够明确指定项目对依赖项的版本要求，避免由于版本不一致导致的兼容性问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于分享和分发&lt;/strong&gt;&lt;br&gt;包管理工具使得开发者能够方便地分享自己的代码库（包）给其他人使用。这种分享机制促进了开源社区的发展，使得开发者能够从全球范围内获取并贡献代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建和部署&lt;/strong&gt;&lt;br&gt;包管理工具通常集成了构建和打包的功能，简化了项目的构建过程。通过包管理工具，开发者可以轻松地将项目部署到生产环境中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化任务&lt;/strong&gt;&lt;br&gt;包管理工具支持定义和运行各种自动化任务，例如运行测试、执行代码风格检查、生成文档等。这些任务可以通过配置文件或命令行参数进行定制，提高了开发过程的效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;br&gt;包管理工具通常包含安全审查机制，能够检测并报告依赖项中存在的安全漏洞。这有助于开发者及时采取措施，保障项目的安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多项目管理&lt;/strong&gt;&lt;br&gt;对于大型项目或使用多个子项目的情况，包管理工具支持工作区（workspace）和多包存储库，使得依赖项的管理更加灵活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境隔离&lt;/strong&gt;&lt;br&gt;包管理工具可以创建虚拟环境，将项目的依赖项隔离开来，避免了不同项目之间的冲突。这种隔离有助于确保项目在不同环境中的稳定性。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="nodejs" scheme="http://21ido.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://21ido.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>当空数组遇上every, some</title>
    <link href="http://21ido.com/2023/09/1a355503/"/>
    <id>http://21ido.com/2023/09/1a355503/</id>
    <published>2023-09-16T02:18:12.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;早在17年写过一篇JS数组的文章&lt;br&gt;&lt;a href=&quot;/2017/03/10afd6ef/&quot; title=&quot;Javascript数组的every、some、map、filter、forEach&quot;&gt;Javascript数组的every、some、map、filter、forEach&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文中提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;every&lt;/em&gt;，判断是否所有元素都符合，需要每个都为true才返回true，否则返回false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个说法有误，当传入空数组时，返回的也是 true&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[].&lt;span class=&quot;title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//--&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以并不是说数组每个都为true时结果才为true，这点就很费解了&lt;br&gt;然后搜了ECMA-262规范的实现&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="ES5" scheme="http://21ido.com/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>EventSource使用指南</title>
    <link href="http://21ido.com/2023/07/b5cab5bb/"/>
    <id>http://21ido.com/2023/07/b5cab5bb/</id>
    <published>2023-07-27T03:46:25.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;EventSource是基于http协议的推送技术，用于服务器主动向客户端发送数据，而不需要客服端主动请求&lt;/p&gt;
&lt;h3 id=&quot;1-优缺点&quot;&gt;&lt;a href=&quot;#1-优缺点&quot; class=&quot;headerlink&quot; title=&quot;1. 优缺点&quot;&gt;&lt;/a&gt;1. 优缺点&lt;/h3&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于http1.1，目前浏览器都支持&lt;/li&gt;
&lt;li&gt;自动断线重连，无需另写心跳检测&lt;/li&gt;
&lt;li&gt;支持自定义消息类型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单向通讯，客户端无法向服务端发送数据&lt;/li&gt;
&lt;li&gt;仅支持纯文本，二进制数据需转码才能传送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相比于Websocket，EventSource更加轻量级，而且Websocket是独立协议，需要服务端支持&lt;br&gt;除了不能主动发送数据，可以说Websocket能做的，EventSource都能做&lt;/p&gt;
&lt;h3 id=&quot;2-应用场景&quot;&gt;&lt;a href=&quot;#2-应用场景&quot; class=&quot;headerlink&quot; title=&quot;2. 应用场景&quot;&gt;&lt;/a&gt;2. 应用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ChatGPT&lt;/li&gt;
&lt;li&gt;天气预报&lt;/li&gt;
&lt;li&gt;股票外汇等价格牌&lt;/li&gt;
&lt;li&gt;火车公交位置牌&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-建立连接&quot;&gt;&lt;a href=&quot;#3-建立连接&quot; class=&quot;headerlink&quot; title=&quot;3. 建立连接&quot;&gt;&lt;/a&gt;3. 建立连接&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/2023/07/eventsource1.png&quot; alt=&quot;EventSource&quot;&gt;&lt;/p&gt;
&lt;p&gt;EventSource使用简单，目前流行浏览器均支持&lt;/p&gt;
&lt;p&gt;本文用node来写服务端的请求response&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="eventsource" scheme="http://21ido.com/tags/eventsource/"/>
    
  </entry>
  
  <entry>
    <title>什么是灰度测试</title>
    <link href="http://21ido.com/2023/05/434fdf21/"/>
    <id>http://21ido.com/2023/05/434fdf21/</id>
    <published>2023-05-22T03:03:27.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-灰度的来源&quot;&gt;&lt;a href=&quot;#1-灰度的来源&quot; class=&quot;headerlink&quot; title=&quot;1. 灰度的来源&quot;&gt;&lt;/a&gt;1. 灰度的来源&lt;/h2&gt;&lt;p&gt;当软件升级迭代在遇到架构或功能大改动（技术层面），或是需求和操作的大调整（用户体验层面），往往不是全量发布，而是先小范围发布，没有问题再增量到全部用户，这一过程，类似由白到黑的过度，而白与黑之间均为灰色，所以这一部署过程也叫灰度测试&lt;/p&gt;
&lt;h2 id=&quot;2-目的&quot;&gt;&lt;a href=&quot;#2-目的&quot; class=&quot;headerlink&quot; title=&quot;2. 目的&quot;&gt;&lt;/a&gt;2. 目的&lt;/h2&gt;&lt;p&gt;灰度测试是软件发布的一种测试方法，它通过向一小部分真实用户开放测试，接收他们的真实使用反馈和及时修复问题，从而降低改动带来的风险。&lt;/p&gt;
&lt;h2 id=&quot;3-流程&quot;&gt;&lt;a href=&quot;#3-流程&quot; class=&quot;headerlink&quot; title=&quot;3. 流程&quot;&gt;&lt;/a&gt;3. 流程&lt;/h2&gt;&lt;p&gt;灰度测试的流程可以概括为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定测试目标和测试人员：在灰度测试前，需要明确测试的目标和测试人员，以便确定测试的范围和测试指标。&lt;/li&gt;
&lt;li&gt;确定策略：包括部署策略、用户规模、覆盖率和回滚策略。&lt;/li&gt;
&lt;li&gt;分批次放量：需要分批次放量，先将新版本软件部署给一部分用户使用，观察其运行情况。如果没有问题，再逐渐扩大用户量，直至将新版本软件全部部署。&lt;/li&gt;
&lt;li&gt;收集反馈和修复问题：在测试过程中，需要及时收集用户的反馈和问题，对问题进行分析和修复&lt;/li&gt;
&lt;li&gt;再次发布新版本，确保没问题后逐渐扩大用户覆盖范围，直到100%全覆盖&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;4-注意事项&quot;&gt;&lt;a href=&quot;#4-注意事项&quot; class=&quot;headerlink&quot; title=&quot;4. 注意事项&quot;&gt;&lt;/a&gt;4. 注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在真实环境下进行灰度测试，尽可能模拟真实的用户使用场景。&lt;/li&gt;
&lt;li&gt;分析测试结果，并及时修复问题。&lt;/li&gt;
&lt;li&gt;有一个完善的测试计划和测试指标，以便于评估测试的效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，灰度测试是软件开发过程中不可或缺的环节，可以帮助开发人员及时发现和修复问题，提高软件的质量和用户体验。但是，在进行灰度测试时需要注意相关的注意事项，以确保测试的有效性和可靠性&lt;/p&gt;
&lt;h2 id=&quot;5-部署&quot;&gt;&lt;a href=&quot;#5-部署&quot; class=&quot;headerlink&quot; title=&quot;5. 部署&quot;&gt;&lt;/a&gt;5. 部署&lt;/h2&gt;&lt;p&gt;本章图片均搜自谷歌，如有冒犯，请联系我删除&lt;/p&gt;
&lt;h3 id=&quot;5-1-蓝绿部署&quot;&gt;&lt;a href=&quot;#5-1-蓝绿部署&quot; class=&quot;headerlink&quot; title=&quot;5.1 蓝绿部署&quot;&gt;&lt;/a&gt;5.1 蓝绿部署&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/2023/05/grey1.png&quot; alt=&quot;蓝绿部署&quot; title=&quot;蓝绿部署&quot;&gt;&lt;/p&gt;
&lt;p&gt;蓝色为原始版本环境，绿色为新版本环境&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="CI/CD" scheme="http://21ido.com/tags/CI-CD/"/>
    
      <category term="软件测试" scheme="http://21ido.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions实现Hexo自动化部署</title>
    <link href="http://21ido.com/2023/05/49292e5e/"/>
    <id>http://21ido.com/2023/05/49292e5e/</id>
    <published>2023-05-03T15:26:22.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何使用GitHub Actions实现Hexo自动化部署，并指出了一些现有YAML代码所引用的脚本比较老导致报错的问题。&lt;/p&gt;
&lt;p&gt;Hexo是一个快速、简单且强大的静态博客框架，而GitHub Actions则是一项功能强大的CI/CD工具，可以自动化地执行软件开发工作流程，用于自动构建、测试和部署代码，从而加快软件开发周期。&lt;/p&gt;
&lt;p&gt;GitHub Actions使用YAML脚本语言，一种轻量级的标记语言，语法简单，相比JSON更加简介，可以轻松地编写和维护自动化工作流程。&lt;/p&gt;
&lt;h2 id=&quot;1-SSH秘钥&quot;&gt;&lt;a href=&quot;#1-SSH秘钥&quot; class=&quot;headerlink&quot; title=&quot;1. SSH秘钥&quot;&gt;&lt;/a&gt;1. SSH秘钥&lt;/h2&gt;&lt;p&gt;我的Hexo分2个Git仓库，源码为私库 21ido.com，发布到 GitHub Pages为公开库 think2cat.github.io&lt;/p&gt;
&lt;p&gt;因为是从源码私库push到Pages公开库，此时需要在公开库设置公钥&lt;/p&gt;
&lt;h3 id=&quot;1-1-生成秘钥&quot;&gt;&lt;a href=&quot;#1-1-生成秘钥&quot; class=&quot;headerlink&quot; title=&quot;1.1 生成秘钥&quot;&gt;&lt;/a&gt;1.1 生成秘钥&lt;/h3&gt;&lt;p&gt;执行下面代码，其中邮箱替换成自己的&lt;br&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt; -C &amp;quot;gavin2026@xxx.com&amp;quot; -f hexo -N &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成2个文件，hexo 和 hexo.pub&lt;/p&gt;
&lt;h3 id=&quot;1-2-设置公钥&quot;&gt;&lt;a href=&quot;#1-2-设置公钥&quot; class=&quot;headerlink&quot; title=&quot;1.2 设置公钥&quot;&gt;&lt;/a&gt;1.2 设置公钥&lt;/h3&gt;&lt;p&gt;用记事本打开 hexo.pub，全选复制后到GitHub Pages库&lt;/p&gt;
&lt;p&gt;Settings &amp;gt; Deploy keys &amp;gt; Add deploy key&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2023/05/actions1.png&quot; alt=&quot;Deploy key&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="Git" scheme="http://21ido.com/tags/Git/"/>
    
      <category term="Github" scheme="http://21ido.com/tags/Github/"/>
    
      <category term="CI/CD" scheme="http://21ido.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript的线程与进程</title>
    <link href="http://21ido.com/2020/09/5bd537b/"/>
    <id>http://21ido.com/2020/09/5bd537b/</id>
    <published>2020-09-14T02:34:10.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先，JavaScript 是单线程语言。&lt;/p&gt;
&lt;h3 id=&quot;1-进程和线程的关系&quot;&gt;&lt;a href=&quot;#1-进程和线程的关系&quot; class=&quot;headerlink&quot; title=&quot;1. 进程和线程的关系&quot;&gt;&lt;/a&gt;1.
        
      
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="ES6" scheme="http://21ido.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>VUE代码规范</title>
    <link href="http://21ido.com/2019/07/c9ca51c5/"/>
    <id>http://21ido.com/2019/07/c9ca51c5/</id>
    <published>2019-07-22T06:21:08.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为规范代码特写了本文，但实际由于历史包袱，还有很多jQuery时代的代码，加上人员技术水平不齐，执行起来非常有难度&lt;/p&gt;
&lt;h2 id=&quot;1-目的&quot;&gt;&lt;a href=&quot;#1-目的&quot; class=&quot;headerlink&quot; title=&quot;1. 目的&quot;&gt;&lt;/a&gt;1. 目的&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;易于阅读和理解&lt;/li&gt;
&lt;li&gt;有助于debug&lt;/li&gt;
&lt;li&gt;方便接手的人&lt;/li&gt;
&lt;li&gt;不挖坑&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-目录和文件规范&quot;&gt;&lt;a href=&quot;#2-目录和文件规范&quot; class=&quot;headerlink&quot; title=&quot;2. 目录和文件规范&quot;&gt;&lt;/a&gt;2. 目录和文件规范&lt;/h2&gt;&lt;h3 id=&quot;2-1-目录结构&quot;&gt;&lt;a href=&quot;#2-1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;2.1 目录结构&quot;&gt;&lt;/a&gt;2.1 目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;src                                  源码目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- api                              接口，统一管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- assets                           静态资源，统一管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- components                       公用组件，全局文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- config                           配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- filters                          过滤器，全局工具&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- icons                            图标，全局资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- layout                           页面模板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- libs                             公用工具库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- mock                             模拟接口，临时存放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- store                            vuex, 状态管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- router                           路由，统一管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- views                            视图目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- account                      视图模块名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- |-- mygroup.vue              模块入口页面&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="vuejs" scheme="http://21ido.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>ES6笔记(3)类</title>
    <link href="http://21ido.com/2019/03/1eabff52/"/>
    <id>http://21ido.com/2019/03/1eabff52/</id>
    <published>2019-03-01T10:04:38.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ES5是没有类这个东西，虽然可以写出看起来像类的代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Cat&lt;/span&gt; (name, color) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ret = &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;Cat&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ret.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt; = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ret.&lt;span class=&quot;property&quot;&gt;color&lt;/span&gt; = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Cat&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;say&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;say&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;eat&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;eat&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;BlackCat&lt;/span&gt; = &lt;span class=&quot;title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Lily&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;BlackCat&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;say&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; say lily&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到了ES6，有了比较正经的写法&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Cat&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, color&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt; = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;color&lt;/span&gt; = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;say&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;eat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;eat&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;BlackCat&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Lily&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;black&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;BlackCat&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;say&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; say lily&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为有了构造函数 &lt;code&gt;constructor&lt;/code&gt; 看起来就比较像传统类&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="ES6" scheme="http://21ido.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Canvas踩坑(2)马克笔效果</title>
    <link href="http://21ido.com/2018/12/27f27d32/"/>
    <id>http://21ido.com/2018/12/27f27d32/</id>
    <published>2018-12-24T11:52:27.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2018/12/markerpen0.png&quot; alt=&quot;Marker Pen&quot;&gt;&lt;/p&gt;
&lt;p&gt;画笔里面，马克笔算是比较简单，比较难的是铅笔和毛笔&lt;/p&gt;
&lt;p&gt;一般的线是由点连起来的，设置好 &lt;code&gt;lineCap&lt;/code&gt; 和 &lt;code&gt;lineJoin&lt;/code&gt; 即可，但马克笔是由&lt;strong&gt;块&lt;/strong&gt;连起来的&lt;/p&gt;
&lt;p&gt;当我们拿到一个XY坐标点后，需进行扩大，使其变成一个矩形&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="canvas" scheme="http://21ido.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas踩坑(1)实时绘制透明线</title>
    <link href="http://21ido.com/2018/11/4d59cb14/"/>
    <id>http://21ido.com/2018/11/4d59cb14/</id>
    <published>2018-11-23T08:51:24.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2018/11/canvasOpacity_1.png&quot; alt=&quot;canvasOpacity_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Canvas画线算是最基础的操作，涉及的方法也比较简单&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_cv = _canvas.&lt;span class=&quot;title function_&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;property&quot;&gt;lineWidth&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;property&quot;&gt;strokeStyle&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;title function_&quot;&gt;beginPath&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;title function_&quot;&gt;moveTo&lt;/span&gt;(point.&lt;span class=&quot;property&quot;&gt;x&lt;/span&gt;, point.&lt;span class=&quot;property&quot;&gt;y&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;title function_&quot;&gt;lineTo&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;y&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;title function_&quot;&gt;stroke&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;点很多的话，加个 &lt;code&gt;for&lt;/code&gt; 循环也轻松搞定，如果画的是透明线，只需用 RGBA 格式即可，比如上图颜色为&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_cv.&lt;span class=&quot;property&quot;&gt;strokeStyle&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;rgba(253, 150, 38, 0.41)&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="canvas" scheme="http://21ido.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>element-ui upload组件覆写默认上传行为</title>
    <link href="http://21ido.com/2018/09/a91bebb6/"/>
    <id>http://21ido.com/2018/09/a91bebb6/</id>
    <published>2018-09-20T03:15:35.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;element-ui 自带了上传组件，支持多文件，支持文件列表显示，支持定义各种钩子，非常方便&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;el-upload&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;upload&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:show-file-list&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;uploadUrl&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:before-upload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;handleBeforeUpload&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:on-progress&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;handleUploading&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:on-success&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;handleUpload&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:on-error&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;handleUploadError&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;accept&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;.apk&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;:auto-upload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;el-button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;slot&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;trigger&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:loading&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;uploadLoading&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;mini&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;primary&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;上传&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;el-button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-html&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;tips&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;el-upload&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时也提供了 &lt;code&gt;http-request&lt;/code&gt; 参数来自定义上传行为&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="axios" scheme="http://21ido.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>异步回调之generator（1）入门篇</title>
    <link href="http://21ido.com/2018/09/ddbd4da6/"/>
    <id>http://21ido.com/2018/09/ddbd4da6/</id>
    <published>2018-09-11T09:39:39.000Z</published>
    <updated>2024-07-09T12:15:00.726Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Generator&quot;&gt;&lt;a href=&quot;#什么是Generator&quot; class=&quot;headerlink&quot; title=&quot;什么是Generator&quot;&gt;&lt;/a&gt;什么是Generator&lt;/h3&gt;&lt;p&gt;Generator 是ES6新特性，是另一种异步编程解决方案，提供了与之前传统函数不一样的语法行为&lt;br&gt;如果说Promise解决了回调函数的地狱式嵌套，Generator则解决了Promise.then()的多级链式调用&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;function* Generator()&lt;/code&gt; Generator写法跟普通函数一样，&lt;code&gt;function&lt;/code&gt; 和函数名 &lt;code&gt;Generator&lt;/code&gt; 中间多了个&lt;code&gt;*&lt;/code&gt;号，同时函数内部可以使用 &lt;code&gt;yield&lt;/code&gt; 进行暂停并输出值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// *号可随意放置，推荐使用第一种写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title class_&quot;&gt;Generator&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; * &lt;span class=&quot;title class_&quot;&gt;Generator&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *&lt;span class=&quot;title class_&quot;&gt;Generator&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;*&lt;span class=&quot;title class_&quot;&gt;Generator&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="ES6" scheme="http://21ido.com/tags/ES6/"/>
    
      <category term="generator" scheme="http://21ido.com/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>Axios笔记(2)</title>
    <link href="http://21ido.com/2018/08/786557a3/"/>
    <id>http://21ido.com/2018/08/786557a3/</id>
    <published>2018-08-31T09:11:44.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实例化&quot;&gt;&lt;a href=&quot;#实例化&quot; class=&quot;headerlink&quot; title=&quot;实例化&quot;&gt;&lt;/a&gt;实例化&lt;/h2&gt;&lt;p&gt;上一篇说了基本用法，实际使用中并不会直接调用，而是实例化一个对象&lt;br&gt;并配置好基本参数，然后所有请求走实例化对象&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; service = axios.&lt;span class=&quot;title function_&quot;&gt;create&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api1.0/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// request timeout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;query&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;service&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;getList&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;post&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;: query&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;list&lt;/span&gt;(query).&lt;span class=&quot;title function_&quot;&gt;then&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;配置参数较多，参照 &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;拦截器&quot;&gt;&lt;a href=&quot;#拦截器&quot; class=&quot;headerlink&quot; title=&quot;拦截器&quot;&gt;&lt;/a&gt;拦截器&lt;/h2&gt;&lt;p&gt;axios支持拦截器，可以在请求和返回时进行拦截处理
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="axios" scheme="http://21ido.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Axios笔记(1)</title>
    <link href="http://21ido.com/2018/08/e16c0619/"/>
    <id>http://21ido.com/2018/08/e16c0619/</id>
    <published>2018-08-24T05:02:03.000Z</published>
    <updated>2024-07-09T12:15:00.722Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Axios 是基于 promise 的http库，可在nodejs服务端或客户端浏览器运行&lt;br&gt;其中浏览器使用XMLHttpRequests对象进行请求&lt;br&gt;&lt;a href=&quot;https://github.com/axios/axios/&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;支持服务端和客户端&lt;/li&gt;
&lt;li&gt;基于Promise&lt;/li&gt;
&lt;li&gt;支持请求和响应拦截&lt;/li&gt;
&lt;li&gt;支持JSON格式转换&lt;/li&gt;
&lt;li&gt;支持取消请求
    
    </summary>
    
      <category term="Web" scheme="http://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="http://21ido.com/tags/http/"/>
    
      <category term="javascript" scheme="http://21ido.com/tags/javascript/"/>
    
      <category term="axios" scheme="http://21ido.com/tags/axios/"/>
    
  </entry>
  
</feed>
